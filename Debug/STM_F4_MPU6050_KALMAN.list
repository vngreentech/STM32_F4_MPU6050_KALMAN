
STM_F4_MPU6050_KALMAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c40  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08003dc8  08003dc8  00013dc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e50  08003e50  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  08003e50  08003e50  00013e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e58  08003e58  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e58  08003e58  00013e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e5c  08003e5c  00013e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  08003e60  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020100  2**0
                  CONTENTS
 10 .bss          000000d0  20000100  20000100  00020100  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200001d0  200001d0  00020100  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006f2d  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001268  00000000  00000000  0002705d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006d8  00000000  00000000  000282c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000658  00000000  00000000  000289a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fbfb  00000000  00000000  00028ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008a45  00000000  00000000  00048bf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c1e87  00000000  00000000  00051638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001134bf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001f00  00000000  00000000  00113510  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000100 	.word	0x20000100
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003db0 	.word	0x08003db0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000104 	.word	0x20000104
 80001c4:	08003db0 	.word	0x08003db0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_uldivmod>:
 8000aa0:	b953      	cbnz	r3, 8000ab8 <__aeabi_uldivmod+0x18>
 8000aa2:	b94a      	cbnz	r2, 8000ab8 <__aeabi_uldivmod+0x18>
 8000aa4:	2900      	cmp	r1, #0
 8000aa6:	bf08      	it	eq
 8000aa8:	2800      	cmpeq	r0, #0
 8000aaa:	bf1c      	itt	ne
 8000aac:	f04f 31ff 	movne.w	r1, #4294967295
 8000ab0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ab4:	f000 b974 	b.w	8000da0 <__aeabi_idiv0>
 8000ab8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000abc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ac0:	f000 f806 	bl	8000ad0 <__udivmoddi4>
 8000ac4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000acc:	b004      	add	sp, #16
 8000ace:	4770      	bx	lr

08000ad0 <__udivmoddi4>:
 8000ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad4:	9d08      	ldr	r5, [sp, #32]
 8000ad6:	4604      	mov	r4, r0
 8000ad8:	468e      	mov	lr, r1
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d14d      	bne.n	8000b7a <__udivmoddi4+0xaa>
 8000ade:	428a      	cmp	r2, r1
 8000ae0:	4694      	mov	ip, r2
 8000ae2:	d969      	bls.n	8000bb8 <__udivmoddi4+0xe8>
 8000ae4:	fab2 f282 	clz	r2, r2
 8000ae8:	b152      	cbz	r2, 8000b00 <__udivmoddi4+0x30>
 8000aea:	fa01 f302 	lsl.w	r3, r1, r2
 8000aee:	f1c2 0120 	rsb	r1, r2, #32
 8000af2:	fa20 f101 	lsr.w	r1, r0, r1
 8000af6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000afa:	ea41 0e03 	orr.w	lr, r1, r3
 8000afe:	4094      	lsls	r4, r2
 8000b00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b04:	0c21      	lsrs	r1, r4, #16
 8000b06:	fbbe f6f8 	udiv	r6, lr, r8
 8000b0a:	fa1f f78c 	uxth.w	r7, ip
 8000b0e:	fb08 e316 	mls	r3, r8, r6, lr
 8000b12:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b16:	fb06 f107 	mul.w	r1, r6, r7
 8000b1a:	4299      	cmp	r1, r3
 8000b1c:	d90a      	bls.n	8000b34 <__udivmoddi4+0x64>
 8000b1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b22:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b26:	f080 811f 	bcs.w	8000d68 <__udivmoddi4+0x298>
 8000b2a:	4299      	cmp	r1, r3
 8000b2c:	f240 811c 	bls.w	8000d68 <__udivmoddi4+0x298>
 8000b30:	3e02      	subs	r6, #2
 8000b32:	4463      	add	r3, ip
 8000b34:	1a5b      	subs	r3, r3, r1
 8000b36:	b2a4      	uxth	r4, r4
 8000b38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b3c:	fb08 3310 	mls	r3, r8, r0, r3
 8000b40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b44:	fb00 f707 	mul.w	r7, r0, r7
 8000b48:	42a7      	cmp	r7, r4
 8000b4a:	d90a      	bls.n	8000b62 <__udivmoddi4+0x92>
 8000b4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000b50:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b54:	f080 810a 	bcs.w	8000d6c <__udivmoddi4+0x29c>
 8000b58:	42a7      	cmp	r7, r4
 8000b5a:	f240 8107 	bls.w	8000d6c <__udivmoddi4+0x29c>
 8000b5e:	4464      	add	r4, ip
 8000b60:	3802      	subs	r0, #2
 8000b62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b66:	1be4      	subs	r4, r4, r7
 8000b68:	2600      	movs	r6, #0
 8000b6a:	b11d      	cbz	r5, 8000b74 <__udivmoddi4+0xa4>
 8000b6c:	40d4      	lsrs	r4, r2
 8000b6e:	2300      	movs	r3, #0
 8000b70:	e9c5 4300 	strd	r4, r3, [r5]
 8000b74:	4631      	mov	r1, r6
 8000b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7a:	428b      	cmp	r3, r1
 8000b7c:	d909      	bls.n	8000b92 <__udivmoddi4+0xc2>
 8000b7e:	2d00      	cmp	r5, #0
 8000b80:	f000 80ef 	beq.w	8000d62 <__udivmoddi4+0x292>
 8000b84:	2600      	movs	r6, #0
 8000b86:	e9c5 0100 	strd	r0, r1, [r5]
 8000b8a:	4630      	mov	r0, r6
 8000b8c:	4631      	mov	r1, r6
 8000b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b92:	fab3 f683 	clz	r6, r3
 8000b96:	2e00      	cmp	r6, #0
 8000b98:	d14a      	bne.n	8000c30 <__udivmoddi4+0x160>
 8000b9a:	428b      	cmp	r3, r1
 8000b9c:	d302      	bcc.n	8000ba4 <__udivmoddi4+0xd4>
 8000b9e:	4282      	cmp	r2, r0
 8000ba0:	f200 80f9 	bhi.w	8000d96 <__udivmoddi4+0x2c6>
 8000ba4:	1a84      	subs	r4, r0, r2
 8000ba6:	eb61 0303 	sbc.w	r3, r1, r3
 8000baa:	2001      	movs	r0, #1
 8000bac:	469e      	mov	lr, r3
 8000bae:	2d00      	cmp	r5, #0
 8000bb0:	d0e0      	beq.n	8000b74 <__udivmoddi4+0xa4>
 8000bb2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bb6:	e7dd      	b.n	8000b74 <__udivmoddi4+0xa4>
 8000bb8:	b902      	cbnz	r2, 8000bbc <__udivmoddi4+0xec>
 8000bba:	deff      	udf	#255	; 0xff
 8000bbc:	fab2 f282 	clz	r2, r2
 8000bc0:	2a00      	cmp	r2, #0
 8000bc2:	f040 8092 	bne.w	8000cea <__udivmoddi4+0x21a>
 8000bc6:	eba1 010c 	sub.w	r1, r1, ip
 8000bca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bce:	fa1f fe8c 	uxth.w	lr, ip
 8000bd2:	2601      	movs	r6, #1
 8000bd4:	0c20      	lsrs	r0, r4, #16
 8000bd6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bda:	fb07 1113 	mls	r1, r7, r3, r1
 8000bde:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000be2:	fb0e f003 	mul.w	r0, lr, r3
 8000be6:	4288      	cmp	r0, r1
 8000be8:	d908      	bls.n	8000bfc <__udivmoddi4+0x12c>
 8000bea:	eb1c 0101 	adds.w	r1, ip, r1
 8000bee:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bf2:	d202      	bcs.n	8000bfa <__udivmoddi4+0x12a>
 8000bf4:	4288      	cmp	r0, r1
 8000bf6:	f200 80cb 	bhi.w	8000d90 <__udivmoddi4+0x2c0>
 8000bfa:	4643      	mov	r3, r8
 8000bfc:	1a09      	subs	r1, r1, r0
 8000bfe:	b2a4      	uxth	r4, r4
 8000c00:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c04:	fb07 1110 	mls	r1, r7, r0, r1
 8000c08:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000c10:	45a6      	cmp	lr, r4
 8000c12:	d908      	bls.n	8000c26 <__udivmoddi4+0x156>
 8000c14:	eb1c 0404 	adds.w	r4, ip, r4
 8000c18:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c1c:	d202      	bcs.n	8000c24 <__udivmoddi4+0x154>
 8000c1e:	45a6      	cmp	lr, r4
 8000c20:	f200 80bb 	bhi.w	8000d9a <__udivmoddi4+0x2ca>
 8000c24:	4608      	mov	r0, r1
 8000c26:	eba4 040e 	sub.w	r4, r4, lr
 8000c2a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c2e:	e79c      	b.n	8000b6a <__udivmoddi4+0x9a>
 8000c30:	f1c6 0720 	rsb	r7, r6, #32
 8000c34:	40b3      	lsls	r3, r6
 8000c36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c3e:	fa20 f407 	lsr.w	r4, r0, r7
 8000c42:	fa01 f306 	lsl.w	r3, r1, r6
 8000c46:	431c      	orrs	r4, r3
 8000c48:	40f9      	lsrs	r1, r7
 8000c4a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c4e:	fa00 f306 	lsl.w	r3, r0, r6
 8000c52:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c56:	0c20      	lsrs	r0, r4, #16
 8000c58:	fa1f fe8c 	uxth.w	lr, ip
 8000c5c:	fb09 1118 	mls	r1, r9, r8, r1
 8000c60:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c64:	fb08 f00e 	mul.w	r0, r8, lr
 8000c68:	4288      	cmp	r0, r1
 8000c6a:	fa02 f206 	lsl.w	r2, r2, r6
 8000c6e:	d90b      	bls.n	8000c88 <__udivmoddi4+0x1b8>
 8000c70:	eb1c 0101 	adds.w	r1, ip, r1
 8000c74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c78:	f080 8088 	bcs.w	8000d8c <__udivmoddi4+0x2bc>
 8000c7c:	4288      	cmp	r0, r1
 8000c7e:	f240 8085 	bls.w	8000d8c <__udivmoddi4+0x2bc>
 8000c82:	f1a8 0802 	sub.w	r8, r8, #2
 8000c86:	4461      	add	r1, ip
 8000c88:	1a09      	subs	r1, r1, r0
 8000c8a:	b2a4      	uxth	r4, r4
 8000c8c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c90:	fb09 1110 	mls	r1, r9, r0, r1
 8000c94:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c9c:	458e      	cmp	lr, r1
 8000c9e:	d908      	bls.n	8000cb2 <__udivmoddi4+0x1e2>
 8000ca0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ca4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ca8:	d26c      	bcs.n	8000d84 <__udivmoddi4+0x2b4>
 8000caa:	458e      	cmp	lr, r1
 8000cac:	d96a      	bls.n	8000d84 <__udivmoddi4+0x2b4>
 8000cae:	3802      	subs	r0, #2
 8000cb0:	4461      	add	r1, ip
 8000cb2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cb6:	fba0 9402 	umull	r9, r4, r0, r2
 8000cba:	eba1 010e 	sub.w	r1, r1, lr
 8000cbe:	42a1      	cmp	r1, r4
 8000cc0:	46c8      	mov	r8, r9
 8000cc2:	46a6      	mov	lr, r4
 8000cc4:	d356      	bcc.n	8000d74 <__udivmoddi4+0x2a4>
 8000cc6:	d053      	beq.n	8000d70 <__udivmoddi4+0x2a0>
 8000cc8:	b15d      	cbz	r5, 8000ce2 <__udivmoddi4+0x212>
 8000cca:	ebb3 0208 	subs.w	r2, r3, r8
 8000cce:	eb61 010e 	sbc.w	r1, r1, lr
 8000cd2:	fa01 f707 	lsl.w	r7, r1, r7
 8000cd6:	fa22 f306 	lsr.w	r3, r2, r6
 8000cda:	40f1      	lsrs	r1, r6
 8000cdc:	431f      	orrs	r7, r3
 8000cde:	e9c5 7100 	strd	r7, r1, [r5]
 8000ce2:	2600      	movs	r6, #0
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	f1c2 0320 	rsb	r3, r2, #32
 8000cee:	40d8      	lsrs	r0, r3
 8000cf0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf4:	fa21 f303 	lsr.w	r3, r1, r3
 8000cf8:	4091      	lsls	r1, r2
 8000cfa:	4301      	orrs	r1, r0
 8000cfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d00:	fa1f fe8c 	uxth.w	lr, ip
 8000d04:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d08:	fb07 3610 	mls	r6, r7, r0, r3
 8000d0c:	0c0b      	lsrs	r3, r1, #16
 8000d0e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d12:	fb00 f60e 	mul.w	r6, r0, lr
 8000d16:	429e      	cmp	r6, r3
 8000d18:	fa04 f402 	lsl.w	r4, r4, r2
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x260>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d26:	d22f      	bcs.n	8000d88 <__udivmoddi4+0x2b8>
 8000d28:	429e      	cmp	r6, r3
 8000d2a:	d92d      	bls.n	8000d88 <__udivmoddi4+0x2b8>
 8000d2c:	3802      	subs	r0, #2
 8000d2e:	4463      	add	r3, ip
 8000d30:	1b9b      	subs	r3, r3, r6
 8000d32:	b289      	uxth	r1, r1
 8000d34:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d38:	fb07 3316 	mls	r3, r7, r6, r3
 8000d3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d40:	fb06 f30e 	mul.w	r3, r6, lr
 8000d44:	428b      	cmp	r3, r1
 8000d46:	d908      	bls.n	8000d5a <__udivmoddi4+0x28a>
 8000d48:	eb1c 0101 	adds.w	r1, ip, r1
 8000d4c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d50:	d216      	bcs.n	8000d80 <__udivmoddi4+0x2b0>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d914      	bls.n	8000d80 <__udivmoddi4+0x2b0>
 8000d56:	3e02      	subs	r6, #2
 8000d58:	4461      	add	r1, ip
 8000d5a:	1ac9      	subs	r1, r1, r3
 8000d5c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d60:	e738      	b.n	8000bd4 <__udivmoddi4+0x104>
 8000d62:	462e      	mov	r6, r5
 8000d64:	4628      	mov	r0, r5
 8000d66:	e705      	b.n	8000b74 <__udivmoddi4+0xa4>
 8000d68:	4606      	mov	r6, r0
 8000d6a:	e6e3      	b.n	8000b34 <__udivmoddi4+0x64>
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	e6f8      	b.n	8000b62 <__udivmoddi4+0x92>
 8000d70:	454b      	cmp	r3, r9
 8000d72:	d2a9      	bcs.n	8000cc8 <__udivmoddi4+0x1f8>
 8000d74:	ebb9 0802 	subs.w	r8, r9, r2
 8000d78:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d7c:	3801      	subs	r0, #1
 8000d7e:	e7a3      	b.n	8000cc8 <__udivmoddi4+0x1f8>
 8000d80:	4646      	mov	r6, r8
 8000d82:	e7ea      	b.n	8000d5a <__udivmoddi4+0x28a>
 8000d84:	4620      	mov	r0, r4
 8000d86:	e794      	b.n	8000cb2 <__udivmoddi4+0x1e2>
 8000d88:	4640      	mov	r0, r8
 8000d8a:	e7d1      	b.n	8000d30 <__udivmoddi4+0x260>
 8000d8c:	46d0      	mov	r8, sl
 8000d8e:	e77b      	b.n	8000c88 <__udivmoddi4+0x1b8>
 8000d90:	3b02      	subs	r3, #2
 8000d92:	4461      	add	r1, ip
 8000d94:	e732      	b.n	8000bfc <__udivmoddi4+0x12c>
 8000d96:	4630      	mov	r0, r6
 8000d98:	e709      	b.n	8000bae <__udivmoddi4+0xde>
 8000d9a:	4464      	add	r4, ip
 8000d9c:	3802      	subs	r0, #2
 8000d9e:	e742      	b.n	8000c26 <__udivmoddi4+0x156>

08000da0 <__aeabi_idiv0>:
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop

08000da4 <MPU6050_Init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b088      	sub	sp, #32
 8000da8:	af04      	add	r7, sp, #16
 8000daa:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8000dac:	2364      	movs	r3, #100	; 0x64
 8000dae:	9302      	str	r3, [sp, #8]
 8000db0:	2301      	movs	r3, #1
 8000db2:	9301      	str	r3, [sp, #4]
 8000db4:	f107 030f 	add.w	r3, r7, #15
 8000db8:	9300      	str	r3, [sp, #0]
 8000dba:	2301      	movs	r3, #1
 8000dbc:	2275      	movs	r2, #117	; 0x75
 8000dbe:	21d0      	movs	r1, #208	; 0xd0
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	f001 faa9 	bl	8002318 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8000dc6:	7bfb      	ldrb	r3, [r7, #15]
 8000dc8:	2b68      	cmp	r3, #104	; 0x68
 8000dca:	d13d      	bne.n	8000e48 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8000dd0:	2364      	movs	r3, #100	; 0x64
 8000dd2:	9302      	str	r3, [sp, #8]
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	9301      	str	r3, [sp, #4]
 8000dd8:	f107 030e 	add.w	r3, r7, #14
 8000ddc:	9300      	str	r3, [sp, #0]
 8000dde:	2301      	movs	r3, #1
 8000de0:	226b      	movs	r2, #107	; 0x6b
 8000de2:	21d0      	movs	r1, #208	; 0xd0
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	f001 f99d 	bl	8002124 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8000dea:	2307      	movs	r3, #7
 8000dec:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8000dee:	2364      	movs	r3, #100	; 0x64
 8000df0:	9302      	str	r3, [sp, #8]
 8000df2:	2301      	movs	r3, #1
 8000df4:	9301      	str	r3, [sp, #4]
 8000df6:	f107 030e 	add.w	r3, r7, #14
 8000dfa:	9300      	str	r3, [sp, #0]
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	2219      	movs	r2, #25
 8000e00:	21d0      	movs	r1, #208	; 0xd0
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f001 f98e 	bl	8002124 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8000e0c:	2364      	movs	r3, #100	; 0x64
 8000e0e:	9302      	str	r3, [sp, #8]
 8000e10:	2301      	movs	r3, #1
 8000e12:	9301      	str	r3, [sp, #4]
 8000e14:	f107 030e 	add.w	r3, r7, #14
 8000e18:	9300      	str	r3, [sp, #0]
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	221c      	movs	r2, #28
 8000e1e:	21d0      	movs	r1, #208	; 0xd0
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	f001 f97f 	bl	8002124 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8000e26:	2300      	movs	r3, #0
 8000e28:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8000e2a:	2364      	movs	r3, #100	; 0x64
 8000e2c:	9302      	str	r3, [sp, #8]
 8000e2e:	2301      	movs	r3, #1
 8000e30:	9301      	str	r3, [sp, #4]
 8000e32:	f107 030e 	add.w	r3, r7, #14
 8000e36:	9300      	str	r3, [sp, #0]
 8000e38:	2301      	movs	r3, #1
 8000e3a:	221b      	movs	r2, #27
 8000e3c:	21d0      	movs	r1, #208	; 0xd0
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	f001 f970 	bl	8002124 <HAL_I2C_Mem_Write>
        return 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	e000      	b.n	8000e4a <MPU6050_Init+0xa6>
    }
    return 1;
 8000e48:	2301      	movs	r3, #1
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3710      	adds	r7, #16
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	0000      	movs	r0, r0
 8000e54:	0000      	movs	r0, r0
	...

08000e58 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8000e58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000e5c:	b094      	sub	sp, #80	; 0x50
 8000e5e:	af04      	add	r7, sp, #16
 8000e60:	6078      	str	r0, [r7, #4]
 8000e62:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8000e64:	2364      	movs	r3, #100	; 0x64
 8000e66:	9302      	str	r3, [sp, #8]
 8000e68:	230e      	movs	r3, #14
 8000e6a:	9301      	str	r3, [sp, #4]
 8000e6c:	f107 0308 	add.w	r3, r7, #8
 8000e70:	9300      	str	r3, [sp, #0]
 8000e72:	2301      	movs	r3, #1
 8000e74:	223b      	movs	r2, #59	; 0x3b
 8000e76:	21d0      	movs	r1, #208	; 0xd0
 8000e78:	6878      	ldr	r0, [r7, #4]
 8000e7a:	f001 fa4d 	bl	8002318 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8000e7e:	7a3b      	ldrb	r3, [r7, #8]
 8000e80:	021b      	lsls	r3, r3, #8
 8000e82:	b21a      	sxth	r2, r3
 8000e84:	7a7b      	ldrb	r3, [r7, #9]
 8000e86:	b21b      	sxth	r3, r3
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	b21a      	sxth	r2, r3
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8000e90:	7abb      	ldrb	r3, [r7, #10]
 8000e92:	021b      	lsls	r3, r3, #8
 8000e94:	b21a      	sxth	r2, r3
 8000e96:	7afb      	ldrb	r3, [r7, #11]
 8000e98:	b21b      	sxth	r3, r3
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	b21a      	sxth	r2, r3
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8000ea2:	7b3b      	ldrb	r3, [r7, #12]
 8000ea4:	021b      	lsls	r3, r3, #8
 8000ea6:	b21a      	sxth	r2, r3
 8000ea8:	7b7b      	ldrb	r3, [r7, #13]
 8000eaa:	b21b      	sxth	r3, r3
 8000eac:	4313      	orrs	r3, r2
 8000eae:	b21a      	sxth	r2, r3
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8000eb4:	7bbb      	ldrb	r3, [r7, #14]
 8000eb6:	021b      	lsls	r3, r3, #8
 8000eb8:	b21a      	sxth	r2, r3
 8000eba:	7bfb      	ldrb	r3, [r7, #15]
 8000ebc:	b21b      	sxth	r3, r3
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8000ec2:	7c3b      	ldrb	r3, [r7, #16]
 8000ec4:	021b      	lsls	r3, r3, #8
 8000ec6:	b21a      	sxth	r2, r3
 8000ec8:	7c7b      	ldrb	r3, [r7, #17]
 8000eca:	b21b      	sxth	r3, r3
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	b21a      	sxth	r2, r3
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8000ed4:	7cbb      	ldrb	r3, [r7, #18]
 8000ed6:	021b      	lsls	r3, r3, #8
 8000ed8:	b21a      	sxth	r2, r3
 8000eda:	7cfb      	ldrb	r3, [r7, #19]
 8000edc:	b21b      	sxth	r3, r3
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	b21a      	sxth	r2, r3
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8000ee6:	7d3b      	ldrb	r3, [r7, #20]
 8000ee8:	021b      	lsls	r3, r3, #8
 8000eea:	b21a      	sxth	r2, r3
 8000eec:	7d7b      	ldrb	r3, [r7, #21]
 8000eee:	b21b      	sxth	r3, r3
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	b21a      	sxth	r2, r3
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff fab4 	bl	800046c <__aeabi_i2d>
 8000f04:	f04f 0200 	mov.w	r2, #0
 8000f08:	4bbd      	ldr	r3, [pc, #756]	; (8001200 <MPU6050_Read_All+0x3a8>)
 8000f0a:	f7ff fc43 	bl	8000794 <__aeabi_ddiv>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	460b      	mov	r3, r1
 8000f12:	6839      	ldr	r1, [r7, #0]
 8000f14:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff faa4 	bl	800046c <__aeabi_i2d>
 8000f24:	f04f 0200 	mov.w	r2, #0
 8000f28:	4bb5      	ldr	r3, [pc, #724]	; (8001200 <MPU6050_Read_All+0x3a8>)
 8000f2a:	f7ff fc33 	bl	8000794 <__aeabi_ddiv>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	460b      	mov	r3, r1
 8000f32:	6839      	ldr	r1, [r7, #0]
 8000f34:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff fa94 	bl	800046c <__aeabi_i2d>
 8000f44:	a3a8      	add	r3, pc, #672	; (adr r3, 80011e8 <MPU6050_Read_All+0x390>)
 8000f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f4a:	f7ff fc23 	bl	8000794 <__aeabi_ddiv>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	460b      	mov	r3, r1
 8000f52:	6839      	ldr	r1, [r7, #0]
 8000f54:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8000f58:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8000f5c:	ee07 3a90 	vmov	s15, r3
 8000f60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f64:	eddf 6aa7 	vldr	s13, [pc, #668]	; 8001204 <MPU6050_Read_All+0x3ac>
 8000f68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f6c:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8001208 <MPU6050_Read_All+0x3b0>
 8000f70:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fa73 	bl	800046c <__aeabi_i2d>
 8000f86:	a39a      	add	r3, pc, #616	; (adr r3, 80011f0 <MPU6050_Read_All+0x398>)
 8000f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f8c:	f7ff fc02 	bl	8000794 <__aeabi_ddiv>
 8000f90:	4602      	mov	r2, r0
 8000f92:	460b      	mov	r3, r1
 8000f94:	6839      	ldr	r1, [r7, #0]
 8000f96:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff fa63 	bl	800046c <__aeabi_i2d>
 8000fa6:	a392      	add	r3, pc, #584	; (adr r3, 80011f0 <MPU6050_Read_All+0x398>)
 8000fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fac:	f7ff fbf2 	bl	8000794 <__aeabi_ddiv>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	6839      	ldr	r1, [r7, #0]
 8000fb6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff fa53 	bl	800046c <__aeabi_i2d>
 8000fc6:	a38a      	add	r3, pc, #552	; (adr r3, 80011f0 <MPU6050_Read_All+0x398>)
 8000fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fcc:	f7ff fbe2 	bl	8000794 <__aeabi_ddiv>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	6839      	ldr	r1, [r7, #0]
 8000fd6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 8000fda:	f000 fcad 	bl	8001938 <HAL_GetTick>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	4b8a      	ldr	r3, [pc, #552]	; (800120c <MPU6050_Read_All+0x3b4>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff fa30 	bl	800044c <__aeabi_ui2d>
 8000fec:	f04f 0200 	mov.w	r2, #0
 8000ff0:	4b87      	ldr	r3, [pc, #540]	; (8001210 <MPU6050_Read_All+0x3b8>)
 8000ff2:	f7ff fbcf 	bl	8000794 <__aeabi_ddiv>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8000ffe:	f000 fc9b 	bl	8001938 <HAL_GetTick>
 8001002:	4603      	mov	r3, r0
 8001004:	4a81      	ldr	r2, [pc, #516]	; (800120c <MPU6050_Read_All+0x3b4>)
 8001006:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800100e:	461a      	mov	r2, r3
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001016:	fb03 f202 	mul.w	r2, r3, r2
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001020:	4619      	mov	r1, r3
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001028:	fb01 f303 	mul.w	r3, r1, r3
 800102c:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff fa1c 	bl	800046c <__aeabi_i2d>
 8001034:	4602      	mov	r2, r0
 8001036:	460b      	mov	r3, r1
 8001038:	ec43 2b10 	vmov	d0, r2, r3
 800103c:	f002 fd0f 	bl	8003a5e <sqrt>
 8001040:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 8001044:	f04f 0200 	mov.w	r2, #0
 8001048:	f04f 0300 	mov.w	r3, #0
 800104c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001050:	f7ff fcde 	bl	8000a10 <__aeabi_dcmpeq>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d11f      	bne.n	800109a <MPU6050_Read_All+0x242>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fa03 	bl	800046c <__aeabi_i2d>
 8001066:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800106a:	f7ff fb93 	bl	8000794 <__aeabi_ddiv>
 800106e:	4602      	mov	r2, r0
 8001070:	460b      	mov	r3, r1
 8001072:	ec43 2b17 	vmov	d7, r2, r3
 8001076:	eeb0 0a47 	vmov.f32	s0, s14
 800107a:	eef0 0a67 	vmov.f32	s1, s15
 800107e:	f002 fb43 	bl	8003708 <atan>
 8001082:	ec51 0b10 	vmov	r0, r1, d0
 8001086:	a35c      	add	r3, pc, #368	; (adr r3, 80011f8 <MPU6050_Read_All+0x3a0>)
 8001088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108c:	f7ff fa58 	bl	8000540 <__aeabi_dmul>
 8001090:	4602      	mov	r2, r0
 8001092:	460b      	mov	r3, r1
 8001094:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001098:	e005      	b.n	80010a6 <MPU6050_Read_All+0x24e>
    }
    else
    {
        roll = 0.0;
 800109a:	f04f 0200 	mov.w	r2, #0
 800109e:	f04f 0300 	mov.w	r3, #0
 80010a2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ac:	425b      	negs	r3, r3
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff f9dc 	bl	800046c <__aeabi_i2d>
 80010b4:	4682      	mov	sl, r0
 80010b6:	468b      	mov	fp, r1
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff f9d4 	bl	800046c <__aeabi_i2d>
 80010c4:	4602      	mov	r2, r0
 80010c6:	460b      	mov	r3, r1
 80010c8:	ec43 2b11 	vmov	d1, r2, r3
 80010cc:	ec4b ab10 	vmov	d0, sl, fp
 80010d0:	f002 fcc3 	bl	8003a5a <atan2>
 80010d4:	ec51 0b10 	vmov	r0, r1, d0
 80010d8:	a347      	add	r3, pc, #284	; (adr r3, 80011f8 <MPU6050_Read_All+0x3a0>)
 80010da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010de:	f7ff fa2f 	bl	8000540 <__aeabi_dmul>
 80010e2:	4602      	mov	r2, r0
 80010e4:	460b      	mov	r3, r1
 80010e6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 80010ea:	f04f 0200 	mov.w	r2, #0
 80010ee:	4b49      	ldr	r3, [pc, #292]	; (8001214 <MPU6050_Read_All+0x3bc>)
 80010f0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80010f4:	f7ff fc96 	bl	8000a24 <__aeabi_dcmplt>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d00a      	beq.n	8001114 <MPU6050_Read_All+0x2bc>
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001104:	f04f 0200 	mov.w	r2, #0
 8001108:	4b43      	ldr	r3, [pc, #268]	; (8001218 <MPU6050_Read_All+0x3c0>)
 800110a:	f7ff fca9 	bl	8000a60 <__aeabi_dcmpgt>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d114      	bne.n	800113e <MPU6050_Read_All+0x2e6>
 8001114:	f04f 0200 	mov.w	r2, #0
 8001118:	4b3f      	ldr	r3, [pc, #252]	; (8001218 <MPU6050_Read_All+0x3c0>)
 800111a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800111e:	f7ff fc9f 	bl	8000a60 <__aeabi_dcmpgt>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d015      	beq.n	8001154 <MPU6050_Read_All+0x2fc>
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800112e:	f04f 0200 	mov.w	r2, #0
 8001132:	4b38      	ldr	r3, [pc, #224]	; (8001214 <MPU6050_Read_All+0x3bc>)
 8001134:	f7ff fc76 	bl	8000a24 <__aeabi_dcmplt>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d00a      	beq.n	8001154 <MPU6050_Read_All+0x2fc>
    {
        KalmanY.angle = pitch;
 800113e:	4937      	ldr	r1, [pc, #220]	; (800121c <MPU6050_Read_All+0x3c4>)
 8001140:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001144:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8001148:	6839      	ldr	r1, [r7, #0]
 800114a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800114e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001152:	e014      	b.n	800117e <MPU6050_Read_All+0x326>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800115a:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 800115e:	eeb0 1a47 	vmov.f32	s2, s14
 8001162:	eef0 1a67 	vmov.f32	s3, s15
 8001166:	ed97 0b06 	vldr	d0, [r7, #24]
 800116a:	482c      	ldr	r0, [pc, #176]	; (800121c <MPU6050_Read_All+0x3c4>)
 800116c:	f000 f85a 	bl	8001224 <Kalman_getAngle>
 8001170:	eeb0 7a40 	vmov.f32	s14, s0
 8001174:	eef0 7a60 	vmov.f32	s15, s1
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001184:	4690      	mov	r8, r2
 8001186:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 800118a:	f04f 0200 	mov.w	r2, #0
 800118e:	4b22      	ldr	r3, [pc, #136]	; (8001218 <MPU6050_Read_All+0x3c0>)
 8001190:	4640      	mov	r0, r8
 8001192:	4649      	mov	r1, r9
 8001194:	f7ff fc64 	bl	8000a60 <__aeabi_dcmpgt>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d008      	beq.n	80011b0 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80011a4:	4614      	mov	r4, r2
 80011a6:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80011b6:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 80011ba:	eeb0 1a47 	vmov.f32	s2, s14
 80011be:	eef0 1a67 	vmov.f32	s3, s15
 80011c2:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 80011c6:	4816      	ldr	r0, [pc, #88]	; (8001220 <MPU6050_Read_All+0x3c8>)
 80011c8:	f000 f82c 	bl	8001224 <Kalman_getAngle>
 80011cc:	eeb0 7a40 	vmov.f32	s14, s0
 80011d0:	eef0 7a60 	vmov.f32	s15, s1
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
}
 80011da:	bf00      	nop
 80011dc:	3740      	adds	r7, #64	; 0x40
 80011de:	46bd      	mov	sp, r7
 80011e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80011e4:	f3af 8000 	nop.w
 80011e8:	00000000 	.word	0x00000000
 80011ec:	40cc2900 	.word	0x40cc2900
 80011f0:	00000000 	.word	0x00000000
 80011f4:	40606000 	.word	0x40606000
 80011f8:	1a63c1f8 	.word	0x1a63c1f8
 80011fc:	404ca5dc 	.word	0x404ca5dc
 8001200:	40d00000 	.word	0x40d00000
 8001204:	43aa0000 	.word	0x43aa0000
 8001208:	42121eb8 	.word	0x42121eb8
 800120c:	200001c8 	.word	0x200001c8
 8001210:	408f4000 	.word	0x408f4000
 8001214:	c0568000 	.word	0xc0568000
 8001218:	40568000 	.word	0x40568000
 800121c:	20000048 	.word	0x20000048
 8001220:	20000000 	.word	0x20000000

08001224 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8001224:	b5b0      	push	{r4, r5, r7, lr}
 8001226:	b096      	sub	sp, #88	; 0x58
 8001228:	af00      	add	r7, sp, #0
 800122a:	61f8      	str	r0, [r7, #28]
 800122c:	ed87 0b04 	vstr	d0, [r7, #16]
 8001230:	ed87 1b02 	vstr	d1, [r7, #8]
 8001234:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800123e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001242:	f7fe ffc5 	bl	80001d0 <__aeabi_dsub>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001254:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001258:	e9d7 0100 	ldrd	r0, r1, [r7]
 800125c:	f7ff f970 	bl	8000540 <__aeabi_dmul>
 8001260:	4602      	mov	r2, r0
 8001262:	460b      	mov	r3, r1
 8001264:	4620      	mov	r0, r4
 8001266:	4629      	mov	r1, r5
 8001268:	f7fe ffb4 	bl	80001d4 <__adddf3>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	69f9      	ldr	r1, [r7, #28]
 8001272:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001282:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001286:	f7ff f95b 	bl	8000540 <__aeabi_dmul>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
 800128e:	4610      	mov	r0, r2
 8001290:	4619      	mov	r1, r3
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001298:	f7fe ff9a 	bl	80001d0 <__aeabi_dsub>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	4610      	mov	r0, r2
 80012a2:	4619      	mov	r1, r3
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80012aa:	f7fe ff91 	bl	80001d0 <__aeabi_dsub>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	4610      	mov	r0, r2
 80012b4:	4619      	mov	r1, r3
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012bc:	f7fe ff8a 	bl	80001d4 <__adddf3>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	4610      	mov	r0, r2
 80012c6:	4619      	mov	r1, r3
 80012c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012cc:	f7ff f938 	bl	8000540 <__aeabi_dmul>
 80012d0:	4602      	mov	r2, r0
 80012d2:	460b      	mov	r3, r1
 80012d4:	4620      	mov	r0, r4
 80012d6:	4629      	mov	r1, r5
 80012d8:	f7fe ff7c 	bl	80001d4 <__adddf3>
 80012dc:	4602      	mov	r2, r0
 80012de:	460b      	mov	r3, r1
 80012e0:	69f9      	ldr	r1, [r7, #28]
 80012e2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80012f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012f6:	f7ff f923 	bl	8000540 <__aeabi_dmul>
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	4620      	mov	r0, r4
 8001300:	4629      	mov	r1, r5
 8001302:	f7fe ff65 	bl	80001d0 <__aeabi_dsub>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
 800130a:	69f9      	ldr	r1, [r7, #28]
 800130c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800131c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001320:	f7ff f90e 	bl	8000540 <__aeabi_dmul>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	4620      	mov	r0, r4
 800132a:	4629      	mov	r1, r5
 800132c:	f7fe ff50 	bl	80001d0 <__aeabi_dsub>
 8001330:	4602      	mov	r2, r0
 8001332:	460b      	mov	r3, r1
 8001334:	69f9      	ldr	r1, [r7, #28]
 8001336:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001346:	e9d7 2300 	ldrd	r2, r3, [r7]
 800134a:	f7ff f8f9 	bl	8000540 <__aeabi_dmul>
 800134e:	4602      	mov	r2, r0
 8001350:	460b      	mov	r3, r1
 8001352:	4620      	mov	r0, r4
 8001354:	4629      	mov	r1, r5
 8001356:	f7fe ff3d 	bl	80001d4 <__adddf3>
 800135a:	4602      	mov	r2, r0
 800135c:	460b      	mov	r3, r1
 800135e:	69f9      	ldr	r1, [r7, #28]
 8001360:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001370:	f7fe ff30 	bl	80001d4 <__adddf3>
 8001374:	4602      	mov	r2, r0
 8001376:	460b      	mov	r3, r1
 8001378:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001382:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001386:	f7ff fa05 	bl	8000794 <__aeabi_ddiv>
 800138a:	4602      	mov	r2, r0
 800138c:	460b      	mov	r3, r1
 800138e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001398:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800139c:	f7ff f9fa 	bl	8000794 <__aeabi_ddiv>
 80013a0:	4602      	mov	r2, r0
 80013a2:	460b      	mov	r3, r1
 80013a4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80013ae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013b2:	f7fe ff0d 	bl	80001d0 <__aeabi_dsub>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80013c4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80013c8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80013cc:	f7ff f8b8 	bl	8000540 <__aeabi_dmul>
 80013d0:	4602      	mov	r2, r0
 80013d2:	460b      	mov	r3, r1
 80013d4:	4620      	mov	r0, r4
 80013d6:	4629      	mov	r1, r5
 80013d8:	f7fe fefc 	bl	80001d4 <__adddf3>
 80013dc:	4602      	mov	r2, r0
 80013de:	460b      	mov	r3, r1
 80013e0:	69f9      	ldr	r1, [r7, #28]
 80013e2:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80013ec:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80013f0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80013f4:	f7ff f8a4 	bl	8000540 <__aeabi_dmul>
 80013f8:	4602      	mov	r2, r0
 80013fa:	460b      	mov	r3, r1
 80013fc:	4620      	mov	r0, r4
 80013fe:	4629      	mov	r1, r5
 8001400:	f7fe fee8 	bl	80001d4 <__adddf3>
 8001404:	4602      	mov	r2, r0
 8001406:	460b      	mov	r3, r1
 8001408:	69f9      	ldr	r1, [r7, #28]
 800140a:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001414:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800141e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001428:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800142c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001430:	f7ff f886 	bl	8000540 <__aeabi_dmul>
 8001434:	4602      	mov	r2, r0
 8001436:	460b      	mov	r3, r1
 8001438:	4620      	mov	r0, r4
 800143a:	4629      	mov	r1, r5
 800143c:	f7fe fec8 	bl	80001d0 <__aeabi_dsub>
 8001440:	4602      	mov	r2, r0
 8001442:	460b      	mov	r3, r1
 8001444:	69f9      	ldr	r1, [r7, #28]
 8001446:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001450:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001454:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001458:	f7ff f872 	bl	8000540 <__aeabi_dmul>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	4620      	mov	r0, r4
 8001462:	4629      	mov	r1, r5
 8001464:	f7fe feb4 	bl	80001d0 <__aeabi_dsub>
 8001468:	4602      	mov	r2, r0
 800146a:	460b      	mov	r3, r1
 800146c:	69f9      	ldr	r1, [r7, #28]
 800146e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001478:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800147c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001480:	f7ff f85e 	bl	8000540 <__aeabi_dmul>
 8001484:	4602      	mov	r2, r0
 8001486:	460b      	mov	r3, r1
 8001488:	4620      	mov	r0, r4
 800148a:	4629      	mov	r1, r5
 800148c:	f7fe fea0 	bl	80001d0 <__aeabi_dsub>
 8001490:	4602      	mov	r2, r0
 8001492:	460b      	mov	r3, r1
 8001494:	69f9      	ldr	r1, [r7, #28]
 8001496:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80014a0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80014a4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80014a8:	f7ff f84a 	bl	8000540 <__aeabi_dmul>
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	4620      	mov	r0, r4
 80014b2:	4629      	mov	r1, r5
 80014b4:	f7fe fe8c 	bl	80001d0 <__aeabi_dsub>
 80014b8:	4602      	mov	r2, r0
 80014ba:	460b      	mov	r3, r1
 80014bc:	69f9      	ldr	r1, [r7, #28]
 80014be:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80014c8:	ec43 2b17 	vmov	d7, r2, r3
};
 80014cc:	eeb0 0a47 	vmov.f32	s0, s14
 80014d0:	eef0 0a67 	vmov.f32	s1, s15
 80014d4:	3758      	adds	r7, #88	; 0x58
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080014dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014e0:	f000 f9c4 	bl	800186c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014e4:	f000 f818 	bl	8001518 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014e8:	f000 f8ae 	bl	8001648 <MX_GPIO_Init>
  MX_I2C1_Init();
 80014ec:	f000 f87e 	bl	80015ec <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  while (MPU6050_Init(&hi2c1) == 1);
 80014f0:	bf00      	nop
 80014f2:	4807      	ldr	r0, [pc, #28]	; (8001510 <main+0x34>)
 80014f4:	f7ff fc56 	bl	8000da4 <MPU6050_Init>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d0f9      	beq.n	80014f2 <main+0x16>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	MPU6050_Read_All(&hi2c1, &MPU6050);
 80014fe:	4905      	ldr	r1, [pc, #20]	; (8001514 <main+0x38>)
 8001500:	4803      	ldr	r0, [pc, #12]	; (8001510 <main+0x34>)
 8001502:	f7ff fca9 	bl	8000e58 <MPU6050_Read_All>
	HAL_Delay (10);
 8001506:	200a      	movs	r0, #10
 8001508:	f000 fa22 	bl	8001950 <HAL_Delay>
	MPU6050_Read_All(&hi2c1, &MPU6050);
 800150c:	e7f7      	b.n	80014fe <main+0x22>
 800150e:	bf00      	nop
 8001510:	2000011c 	.word	0x2000011c
 8001514:	20000170 	.word	0x20000170

08001518 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b094      	sub	sp, #80	; 0x50
 800151c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800151e:	f107 0320 	add.w	r3, r7, #32
 8001522:	2230      	movs	r2, #48	; 0x30
 8001524:	2100      	movs	r1, #0
 8001526:	4618      	mov	r0, r3
 8001528:	f002 f8e6 	bl	80036f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800152c:	f107 030c 	add.w	r3, r7, #12
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]
 800153a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800153c:	2300      	movs	r3, #0
 800153e:	60bb      	str	r3, [r7, #8]
 8001540:	4b28      	ldr	r3, [pc, #160]	; (80015e4 <SystemClock_Config+0xcc>)
 8001542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001544:	4a27      	ldr	r2, [pc, #156]	; (80015e4 <SystemClock_Config+0xcc>)
 8001546:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800154a:	6413      	str	r3, [r2, #64]	; 0x40
 800154c:	4b25      	ldr	r3, [pc, #148]	; (80015e4 <SystemClock_Config+0xcc>)
 800154e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001550:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001554:	60bb      	str	r3, [r7, #8]
 8001556:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001558:	2300      	movs	r3, #0
 800155a:	607b      	str	r3, [r7, #4]
 800155c:	4b22      	ldr	r3, [pc, #136]	; (80015e8 <SystemClock_Config+0xd0>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a21      	ldr	r2, [pc, #132]	; (80015e8 <SystemClock_Config+0xd0>)
 8001562:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001566:	6013      	str	r3, [r2, #0]
 8001568:	4b1f      	ldr	r3, [pc, #124]	; (80015e8 <SystemClock_Config+0xd0>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001570:	607b      	str	r3, [r7, #4]
 8001572:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001574:	2302      	movs	r3, #2
 8001576:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001578:	2301      	movs	r3, #1
 800157a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800157c:	2310      	movs	r3, #16
 800157e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001580:	2302      	movs	r3, #2
 8001582:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001584:	2300      	movs	r3, #0
 8001586:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001588:	2308      	movs	r3, #8
 800158a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800158c:	23a8      	movs	r3, #168	; 0xa8
 800158e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001590:	2302      	movs	r3, #2
 8001592:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001594:	2304      	movs	r3, #4
 8001596:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001598:	f107 0320 	add.w	r3, r7, #32
 800159c:	4618      	mov	r0, r3
 800159e:	f001 fc3d 	bl	8002e1c <HAL_RCC_OscConfig>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015a8:	f000 f884 	bl	80016b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ac:	230f      	movs	r3, #15
 80015ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015b0:	2302      	movs	r3, #2
 80015b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015b4:	2300      	movs	r3, #0
 80015b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015b8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015c4:	f107 030c 	add.w	r3, r7, #12
 80015c8:	2105      	movs	r1, #5
 80015ca:	4618      	mov	r0, r3
 80015cc:	f001 fe9e 	bl	800330c <HAL_RCC_ClockConfig>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80015d6:	f000 f86d 	bl	80016b4 <Error_Handler>
  }
}
 80015da:	bf00      	nop
 80015dc:	3750      	adds	r7, #80	; 0x50
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40023800 	.word	0x40023800
 80015e8:	40007000 	.word	0x40007000

080015ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015f0:	4b12      	ldr	r3, [pc, #72]	; (800163c <MX_I2C1_Init+0x50>)
 80015f2:	4a13      	ldr	r2, [pc, #76]	; (8001640 <MX_I2C1_Init+0x54>)
 80015f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80015f6:	4b11      	ldr	r3, [pc, #68]	; (800163c <MX_I2C1_Init+0x50>)
 80015f8:	4a12      	ldr	r2, [pc, #72]	; (8001644 <MX_I2C1_Init+0x58>)
 80015fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015fc:	4b0f      	ldr	r3, [pc, #60]	; (800163c <MX_I2C1_Init+0x50>)
 80015fe:	2200      	movs	r2, #0
 8001600:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001602:	4b0e      	ldr	r3, [pc, #56]	; (800163c <MX_I2C1_Init+0x50>)
 8001604:	2200      	movs	r2, #0
 8001606:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001608:	4b0c      	ldr	r3, [pc, #48]	; (800163c <MX_I2C1_Init+0x50>)
 800160a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800160e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001610:	4b0a      	ldr	r3, [pc, #40]	; (800163c <MX_I2C1_Init+0x50>)
 8001612:	2200      	movs	r2, #0
 8001614:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001616:	4b09      	ldr	r3, [pc, #36]	; (800163c <MX_I2C1_Init+0x50>)
 8001618:	2200      	movs	r2, #0
 800161a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800161c:	4b07      	ldr	r3, [pc, #28]	; (800163c <MX_I2C1_Init+0x50>)
 800161e:	2200      	movs	r2, #0
 8001620:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001622:	4b06      	ldr	r3, [pc, #24]	; (800163c <MX_I2C1_Init+0x50>)
 8001624:	2200      	movs	r2, #0
 8001626:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001628:	4804      	ldr	r0, [pc, #16]	; (800163c <MX_I2C1_Init+0x50>)
 800162a:	f000 fc37 	bl	8001e9c <HAL_I2C_Init>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001634:	f000 f83e 	bl	80016b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001638:	bf00      	nop
 800163a:	bd80      	pop	{r7, pc}
 800163c:	2000011c 	.word	0x2000011c
 8001640:	40005400 	.word	0x40005400
 8001644:	00061a80 	.word	0x00061a80

08001648 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	4b17      	ldr	r3, [pc, #92]	; (80016b0 <MX_GPIO_Init+0x68>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	4a16      	ldr	r2, [pc, #88]	; (80016b0 <MX_GPIO_Init+0x68>)
 8001658:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800165c:	6313      	str	r3, [r2, #48]	; 0x30
 800165e:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <MX_GPIO_Init+0x68>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	60bb      	str	r3, [r7, #8]
 800166e:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <MX_GPIO_Init+0x68>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	4a0f      	ldr	r2, [pc, #60]	; (80016b0 <MX_GPIO_Init+0x68>)
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	6313      	str	r3, [r2, #48]	; 0x30
 800167a:	4b0d      	ldr	r3, [pc, #52]	; (80016b0 <MX_GPIO_Init+0x68>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	60bb      	str	r3, [r7, #8]
 8001684:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	607b      	str	r3, [r7, #4]
 800168a:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <MX_GPIO_Init+0x68>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	4a08      	ldr	r2, [pc, #32]	; (80016b0 <MX_GPIO_Init+0x68>)
 8001690:	f043 0302 	orr.w	r3, r3, #2
 8001694:	6313      	str	r3, [r2, #48]	; 0x30
 8001696:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <MX_GPIO_Init+0x68>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	607b      	str	r3, [r7, #4]
 80016a0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016a2:	bf00      	nop
 80016a4:	3714      	adds	r7, #20
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	40023800 	.word	0x40023800

080016b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016b8:	b672      	cpsid	i
}
 80016ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016bc:	e7fe      	b.n	80016bc <Error_Handler+0x8>
	...

080016c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	607b      	str	r3, [r7, #4]
 80016ca:	4b10      	ldr	r3, [pc, #64]	; (800170c <HAL_MspInit+0x4c>)
 80016cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ce:	4a0f      	ldr	r2, [pc, #60]	; (800170c <HAL_MspInit+0x4c>)
 80016d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016d4:	6453      	str	r3, [r2, #68]	; 0x44
 80016d6:	4b0d      	ldr	r3, [pc, #52]	; (800170c <HAL_MspInit+0x4c>)
 80016d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016de:	607b      	str	r3, [r7, #4]
 80016e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	603b      	str	r3, [r7, #0]
 80016e6:	4b09      	ldr	r3, [pc, #36]	; (800170c <HAL_MspInit+0x4c>)
 80016e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ea:	4a08      	ldr	r2, [pc, #32]	; (800170c <HAL_MspInit+0x4c>)
 80016ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f0:	6413      	str	r3, [r2, #64]	; 0x40
 80016f2:	4b06      	ldr	r3, [pc, #24]	; (800170c <HAL_MspInit+0x4c>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fa:	603b      	str	r3, [r7, #0]
 80016fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	40023800 	.word	0x40023800

08001710 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b08a      	sub	sp, #40	; 0x28
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001718:	f107 0314 	add.w	r3, r7, #20
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a19      	ldr	r2, [pc, #100]	; (8001794 <HAL_I2C_MspInit+0x84>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d12b      	bne.n	800178a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	613b      	str	r3, [r7, #16]
 8001736:	4b18      	ldr	r3, [pc, #96]	; (8001798 <HAL_I2C_MspInit+0x88>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	4a17      	ldr	r2, [pc, #92]	; (8001798 <HAL_I2C_MspInit+0x88>)
 800173c:	f043 0302 	orr.w	r3, r3, #2
 8001740:	6313      	str	r3, [r2, #48]	; 0x30
 8001742:	4b15      	ldr	r3, [pc, #84]	; (8001798 <HAL_I2C_MspInit+0x88>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	613b      	str	r3, [r7, #16]
 800174c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800174e:	23c0      	movs	r3, #192	; 0xc0
 8001750:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001752:	2312      	movs	r3, #18
 8001754:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800175a:	2303      	movs	r3, #3
 800175c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800175e:	2304      	movs	r3, #4
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001762:	f107 0314 	add.w	r3, r7, #20
 8001766:	4619      	mov	r1, r3
 8001768:	480c      	ldr	r0, [pc, #48]	; (800179c <HAL_I2C_MspInit+0x8c>)
 800176a:	f000 f9fb 	bl	8001b64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	4b09      	ldr	r3, [pc, #36]	; (8001798 <HAL_I2C_MspInit+0x88>)
 8001774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001776:	4a08      	ldr	r2, [pc, #32]	; (8001798 <HAL_I2C_MspInit+0x88>)
 8001778:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800177c:	6413      	str	r3, [r2, #64]	; 0x40
 800177e:	4b06      	ldr	r3, [pc, #24]	; (8001798 <HAL_I2C_MspInit+0x88>)
 8001780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001782:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800178a:	bf00      	nop
 800178c:	3728      	adds	r7, #40	; 0x28
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40005400 	.word	0x40005400
 8001798:	40023800 	.word	0x40023800
 800179c:	40020400 	.word	0x40020400

080017a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017a4:	e7fe      	b.n	80017a4 <NMI_Handler+0x4>

080017a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017aa:	e7fe      	b.n	80017aa <HardFault_Handler+0x4>

080017ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017b0:	e7fe      	b.n	80017b0 <MemManage_Handler+0x4>

080017b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017b2:	b480      	push	{r7}
 80017b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017b6:	e7fe      	b.n	80017b6 <BusFault_Handler+0x4>

080017b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017bc:	e7fe      	b.n	80017bc <UsageFault_Handler+0x4>

080017be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017be:	b480      	push	{r7}
 80017c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017da:	b480      	push	{r7}
 80017dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ec:	f000 f890 	bl	8001910 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017f0:	bf00      	nop
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017f8:	4b06      	ldr	r3, [pc, #24]	; (8001814 <SystemInit+0x20>)
 80017fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017fe:	4a05      	ldr	r2, [pc, #20]	; (8001814 <SystemInit+0x20>)
 8001800:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001804:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	e000ed00 	.word	0xe000ed00

08001818 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001818:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001850 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800181c:	480d      	ldr	r0, [pc, #52]	; (8001854 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800181e:	490e      	ldr	r1, [pc, #56]	; (8001858 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001820:	4a0e      	ldr	r2, [pc, #56]	; (800185c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001822:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001824:	e002      	b.n	800182c <LoopCopyDataInit>

08001826 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001826:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001828:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800182a:	3304      	adds	r3, #4

0800182c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800182c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800182e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001830:	d3f9      	bcc.n	8001826 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001832:	4a0b      	ldr	r2, [pc, #44]	; (8001860 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001834:	4c0b      	ldr	r4, [pc, #44]	; (8001864 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001836:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001838:	e001      	b.n	800183e <LoopFillZerobss>

0800183a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800183a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800183c:	3204      	adds	r2, #4

0800183e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800183e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001840:	d3fb      	bcc.n	800183a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001842:	f7ff ffd7 	bl	80017f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001846:	f001 ff33 	bl	80036b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800184a:	f7ff fe47 	bl	80014dc <main>
  bx  lr    
 800184e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001850:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001854:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001858:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 800185c:	08003e60 	.word	0x08003e60
  ldr r2, =_sbss
 8001860:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8001864:	200001d0 	.word	0x200001d0

08001868 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001868:	e7fe      	b.n	8001868 <ADC_IRQHandler>
	...

0800186c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001870:	4b0e      	ldr	r3, [pc, #56]	; (80018ac <HAL_Init+0x40>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a0d      	ldr	r2, [pc, #52]	; (80018ac <HAL_Init+0x40>)
 8001876:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800187a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800187c:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <HAL_Init+0x40>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a0a      	ldr	r2, [pc, #40]	; (80018ac <HAL_Init+0x40>)
 8001882:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001886:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001888:	4b08      	ldr	r3, [pc, #32]	; (80018ac <HAL_Init+0x40>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a07      	ldr	r2, [pc, #28]	; (80018ac <HAL_Init+0x40>)
 800188e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001892:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001894:	2003      	movs	r0, #3
 8001896:	f000 f931 	bl	8001afc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800189a:	2000      	movs	r0, #0
 800189c:	f000 f808 	bl	80018b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018a0:	f7ff ff0e 	bl	80016c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40023c00 	.word	0x40023c00

080018b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018b8:	4b12      	ldr	r3, [pc, #72]	; (8001904 <HAL_InitTick+0x54>)
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	4b12      	ldr	r3, [pc, #72]	; (8001908 <HAL_InitTick+0x58>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	4619      	mov	r1, r3
 80018c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ce:	4618      	mov	r0, r3
 80018d0:	f000 f93b 	bl	8001b4a <HAL_SYSTICK_Config>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e00e      	b.n	80018fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2b0f      	cmp	r3, #15
 80018e2:	d80a      	bhi.n	80018fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018e4:	2200      	movs	r2, #0
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	f04f 30ff 	mov.w	r0, #4294967295
 80018ec:	f000 f911 	bl	8001b12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018f0:	4a06      	ldr	r2, [pc, #24]	; (800190c <HAL_InitTick+0x5c>)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018f6:	2300      	movs	r3, #0
 80018f8:	e000      	b.n	80018fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	20000090 	.word	0x20000090
 8001908:	20000098 	.word	0x20000098
 800190c:	20000094 	.word	0x20000094

08001910 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001914:	4b06      	ldr	r3, [pc, #24]	; (8001930 <HAL_IncTick+0x20>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	461a      	mov	r2, r3
 800191a:	4b06      	ldr	r3, [pc, #24]	; (8001934 <HAL_IncTick+0x24>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4413      	add	r3, r2
 8001920:	4a04      	ldr	r2, [pc, #16]	; (8001934 <HAL_IncTick+0x24>)
 8001922:	6013      	str	r3, [r2, #0]
}
 8001924:	bf00      	nop
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	20000098 	.word	0x20000098
 8001934:	200001cc 	.word	0x200001cc

08001938 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  return uwTick;
 800193c:	4b03      	ldr	r3, [pc, #12]	; (800194c <HAL_GetTick+0x14>)
 800193e:	681b      	ldr	r3, [r3, #0]
}
 8001940:	4618      	mov	r0, r3
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	200001cc 	.word	0x200001cc

08001950 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001958:	f7ff ffee 	bl	8001938 <HAL_GetTick>
 800195c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001968:	d005      	beq.n	8001976 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800196a:	4b0a      	ldr	r3, [pc, #40]	; (8001994 <HAL_Delay+0x44>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	461a      	mov	r2, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	4413      	add	r3, r2
 8001974:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001976:	bf00      	nop
 8001978:	f7ff ffde 	bl	8001938 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	68fa      	ldr	r2, [r7, #12]
 8001984:	429a      	cmp	r2, r3
 8001986:	d8f7      	bhi.n	8001978 <HAL_Delay+0x28>
  {
  }
}
 8001988:	bf00      	nop
 800198a:	bf00      	nop
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20000098 	.word	0x20000098

08001998 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019a8:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <__NVIC_SetPriorityGrouping+0x44>)
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ae:	68ba      	ldr	r2, [r7, #8]
 80019b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019b4:	4013      	ands	r3, r2
 80019b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ca:	4a04      	ldr	r2, [pc, #16]	; (80019dc <__NVIC_SetPriorityGrouping+0x44>)
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	60d3      	str	r3, [r2, #12]
}
 80019d0:	bf00      	nop
 80019d2:	3714      	adds	r7, #20
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019e4:	4b04      	ldr	r3, [pc, #16]	; (80019f8 <__NVIC_GetPriorityGrouping+0x18>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	0a1b      	lsrs	r3, r3, #8
 80019ea:	f003 0307 	and.w	r3, r3, #7
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	e000ed00 	.word	0xe000ed00

080019fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	6039      	str	r1, [r7, #0]
 8001a06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	db0a      	blt.n	8001a26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	b2da      	uxtb	r2, r3
 8001a14:	490c      	ldr	r1, [pc, #48]	; (8001a48 <__NVIC_SetPriority+0x4c>)
 8001a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1a:	0112      	lsls	r2, r2, #4
 8001a1c:	b2d2      	uxtb	r2, r2
 8001a1e:	440b      	add	r3, r1
 8001a20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a24:	e00a      	b.n	8001a3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	b2da      	uxtb	r2, r3
 8001a2a:	4908      	ldr	r1, [pc, #32]	; (8001a4c <__NVIC_SetPriority+0x50>)
 8001a2c:	79fb      	ldrb	r3, [r7, #7]
 8001a2e:	f003 030f 	and.w	r3, r3, #15
 8001a32:	3b04      	subs	r3, #4
 8001a34:	0112      	lsls	r2, r2, #4
 8001a36:	b2d2      	uxtb	r2, r2
 8001a38:	440b      	add	r3, r1
 8001a3a:	761a      	strb	r2, [r3, #24]
}
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	e000e100 	.word	0xe000e100
 8001a4c:	e000ed00 	.word	0xe000ed00

08001a50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b089      	sub	sp, #36	; 0x24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	f1c3 0307 	rsb	r3, r3, #7
 8001a6a:	2b04      	cmp	r3, #4
 8001a6c:	bf28      	it	cs
 8001a6e:	2304      	movcs	r3, #4
 8001a70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	3304      	adds	r3, #4
 8001a76:	2b06      	cmp	r3, #6
 8001a78:	d902      	bls.n	8001a80 <NVIC_EncodePriority+0x30>
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	3b03      	subs	r3, #3
 8001a7e:	e000      	b.n	8001a82 <NVIC_EncodePriority+0x32>
 8001a80:	2300      	movs	r3, #0
 8001a82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a84:	f04f 32ff 	mov.w	r2, #4294967295
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	43da      	mvns	r2, r3
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	401a      	ands	r2, r3
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a98:	f04f 31ff 	mov.w	r1, #4294967295
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa2:	43d9      	mvns	r1, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa8:	4313      	orrs	r3, r2
         );
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3724      	adds	r7, #36	; 0x24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
	...

08001ab8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ac8:	d301      	bcc.n	8001ace <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aca:	2301      	movs	r3, #1
 8001acc:	e00f      	b.n	8001aee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ace:	4a0a      	ldr	r2, [pc, #40]	; (8001af8 <SysTick_Config+0x40>)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ad6:	210f      	movs	r1, #15
 8001ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8001adc:	f7ff ff8e 	bl	80019fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ae0:	4b05      	ldr	r3, [pc, #20]	; (8001af8 <SysTick_Config+0x40>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ae6:	4b04      	ldr	r3, [pc, #16]	; (8001af8 <SysTick_Config+0x40>)
 8001ae8:	2207      	movs	r2, #7
 8001aea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	e000e010 	.word	0xe000e010

08001afc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f7ff ff47 	bl	8001998 <__NVIC_SetPriorityGrouping>
}
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b086      	sub	sp, #24
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	4603      	mov	r3, r0
 8001b1a:	60b9      	str	r1, [r7, #8]
 8001b1c:	607a      	str	r2, [r7, #4]
 8001b1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b20:	2300      	movs	r3, #0
 8001b22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b24:	f7ff ff5c 	bl	80019e0 <__NVIC_GetPriorityGrouping>
 8001b28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	68b9      	ldr	r1, [r7, #8]
 8001b2e:	6978      	ldr	r0, [r7, #20]
 8001b30:	f7ff ff8e 	bl	8001a50 <NVIC_EncodePriority>
 8001b34:	4602      	mov	r2, r0
 8001b36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b3a:	4611      	mov	r1, r2
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff ff5d 	bl	80019fc <__NVIC_SetPriority>
}
 8001b42:	bf00      	nop
 8001b44:	3718      	adds	r7, #24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b082      	sub	sp, #8
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f7ff ffb0 	bl	8001ab8 <SysTick_Config>
 8001b58:	4603      	mov	r3, r0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
	...

08001b64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b089      	sub	sp, #36	; 0x24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b72:	2300      	movs	r3, #0
 8001b74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b76:	2300      	movs	r3, #0
 8001b78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61fb      	str	r3, [r7, #28]
 8001b7e:	e16b      	b.n	8001e58 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b80:	2201      	movs	r2, #1
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	697a      	ldr	r2, [r7, #20]
 8001b90:	4013      	ands	r3, r2
 8001b92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b94:	693a      	ldr	r2, [r7, #16]
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	f040 815a 	bne.w	8001e52 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f003 0303 	and.w	r3, r3, #3
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d005      	beq.n	8001bb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d130      	bne.n	8001c18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	2203      	movs	r2, #3
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	68da      	ldr	r2, [r3, #12]
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bec:	2201      	movs	r2, #1
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	091b      	lsrs	r3, r3, #4
 8001c02:	f003 0201 	and.w	r2, r3, #1
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f003 0303 	and.w	r3, r3, #3
 8001c20:	2b03      	cmp	r3, #3
 8001c22:	d017      	beq.n	8001c54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	2203      	movs	r2, #3
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	43db      	mvns	r3, r3
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f003 0303 	and.w	r3, r3, #3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d123      	bne.n	8001ca8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	08da      	lsrs	r2, r3, #3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3208      	adds	r2, #8
 8001c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	f003 0307 	and.w	r3, r3, #7
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	220f      	movs	r2, #15
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4013      	ands	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	691a      	ldr	r2, [r3, #16]
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	08da      	lsrs	r2, r3, #3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	3208      	adds	r2, #8
 8001ca2:	69b9      	ldr	r1, [r7, #24]
 8001ca4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	2203      	movs	r2, #3
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f003 0203 	and.w	r2, r3, #3
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	f000 80b4 	beq.w	8001e52 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	4b60      	ldr	r3, [pc, #384]	; (8001e70 <HAL_GPIO_Init+0x30c>)
 8001cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf2:	4a5f      	ldr	r2, [pc, #380]	; (8001e70 <HAL_GPIO_Init+0x30c>)
 8001cf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cf8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cfa:	4b5d      	ldr	r3, [pc, #372]	; (8001e70 <HAL_GPIO_Init+0x30c>)
 8001cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d06:	4a5b      	ldr	r2, [pc, #364]	; (8001e74 <HAL_GPIO_Init+0x310>)
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	089b      	lsrs	r3, r3, #2
 8001d0c:	3302      	adds	r3, #2
 8001d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	f003 0303 	and.w	r3, r3, #3
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	220f      	movs	r2, #15
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	43db      	mvns	r3, r3
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	4013      	ands	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a52      	ldr	r2, [pc, #328]	; (8001e78 <HAL_GPIO_Init+0x314>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d02b      	beq.n	8001d8a <HAL_GPIO_Init+0x226>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a51      	ldr	r2, [pc, #324]	; (8001e7c <HAL_GPIO_Init+0x318>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d025      	beq.n	8001d86 <HAL_GPIO_Init+0x222>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a50      	ldr	r2, [pc, #320]	; (8001e80 <HAL_GPIO_Init+0x31c>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d01f      	beq.n	8001d82 <HAL_GPIO_Init+0x21e>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a4f      	ldr	r2, [pc, #316]	; (8001e84 <HAL_GPIO_Init+0x320>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d019      	beq.n	8001d7e <HAL_GPIO_Init+0x21a>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a4e      	ldr	r2, [pc, #312]	; (8001e88 <HAL_GPIO_Init+0x324>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d013      	beq.n	8001d7a <HAL_GPIO_Init+0x216>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a4d      	ldr	r2, [pc, #308]	; (8001e8c <HAL_GPIO_Init+0x328>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d00d      	beq.n	8001d76 <HAL_GPIO_Init+0x212>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a4c      	ldr	r2, [pc, #304]	; (8001e90 <HAL_GPIO_Init+0x32c>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d007      	beq.n	8001d72 <HAL_GPIO_Init+0x20e>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a4b      	ldr	r2, [pc, #300]	; (8001e94 <HAL_GPIO_Init+0x330>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d101      	bne.n	8001d6e <HAL_GPIO_Init+0x20a>
 8001d6a:	2307      	movs	r3, #7
 8001d6c:	e00e      	b.n	8001d8c <HAL_GPIO_Init+0x228>
 8001d6e:	2308      	movs	r3, #8
 8001d70:	e00c      	b.n	8001d8c <HAL_GPIO_Init+0x228>
 8001d72:	2306      	movs	r3, #6
 8001d74:	e00a      	b.n	8001d8c <HAL_GPIO_Init+0x228>
 8001d76:	2305      	movs	r3, #5
 8001d78:	e008      	b.n	8001d8c <HAL_GPIO_Init+0x228>
 8001d7a:	2304      	movs	r3, #4
 8001d7c:	e006      	b.n	8001d8c <HAL_GPIO_Init+0x228>
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e004      	b.n	8001d8c <HAL_GPIO_Init+0x228>
 8001d82:	2302      	movs	r3, #2
 8001d84:	e002      	b.n	8001d8c <HAL_GPIO_Init+0x228>
 8001d86:	2301      	movs	r3, #1
 8001d88:	e000      	b.n	8001d8c <HAL_GPIO_Init+0x228>
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	69fa      	ldr	r2, [r7, #28]
 8001d8e:	f002 0203 	and.w	r2, r2, #3
 8001d92:	0092      	lsls	r2, r2, #2
 8001d94:	4093      	lsls	r3, r2
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d9c:	4935      	ldr	r1, [pc, #212]	; (8001e74 <HAL_GPIO_Init+0x310>)
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	089b      	lsrs	r3, r3, #2
 8001da2:	3302      	adds	r3, #2
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001daa:	4b3b      	ldr	r3, [pc, #236]	; (8001e98 <HAL_GPIO_Init+0x334>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	43db      	mvns	r3, r3
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	4013      	ands	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d003      	beq.n	8001dce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dce:	4a32      	ldr	r2, [pc, #200]	; (8001e98 <HAL_GPIO_Init+0x334>)
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dd4:	4b30      	ldr	r3, [pc, #192]	; (8001e98 <HAL_GPIO_Init+0x334>)
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	4013      	ands	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d003      	beq.n	8001df8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001df8:	4a27      	ldr	r2, [pc, #156]	; (8001e98 <HAL_GPIO_Init+0x334>)
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dfe:	4b26      	ldr	r3, [pc, #152]	; (8001e98 <HAL_GPIO_Init+0x334>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	43db      	mvns	r3, r3
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e22:	4a1d      	ldr	r2, [pc, #116]	; (8001e98 <HAL_GPIO_Init+0x334>)
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e28:	4b1b      	ldr	r3, [pc, #108]	; (8001e98 <HAL_GPIO_Init+0x334>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	43db      	mvns	r3, r3
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	4013      	ands	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d003      	beq.n	8001e4c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e4c:	4a12      	ldr	r2, [pc, #72]	; (8001e98 <HAL_GPIO_Init+0x334>)
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	3301      	adds	r3, #1
 8001e56:	61fb      	str	r3, [r7, #28]
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	2b0f      	cmp	r3, #15
 8001e5c:	f67f ae90 	bls.w	8001b80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e60:	bf00      	nop
 8001e62:	bf00      	nop
 8001e64:	3724      	adds	r7, #36	; 0x24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	40023800 	.word	0x40023800
 8001e74:	40013800 	.word	0x40013800
 8001e78:	40020000 	.word	0x40020000
 8001e7c:	40020400 	.word	0x40020400
 8001e80:	40020800 	.word	0x40020800
 8001e84:	40020c00 	.word	0x40020c00
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	40021400 	.word	0x40021400
 8001e90:	40021800 	.word	0x40021800
 8001e94:	40021c00 	.word	0x40021c00
 8001e98:	40013c00 	.word	0x40013c00

08001e9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d101      	bne.n	8001eae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e12b      	b.n	8002106 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d106      	bne.n	8001ec8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f7ff fc24 	bl	8001710 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2224      	movs	r2, #36	; 0x24
 8001ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f022 0201 	bic.w	r2, r2, #1
 8001ede:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001eee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001efe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f00:	f001 fbbc 	bl	800367c <HAL_RCC_GetPCLK1Freq>
 8001f04:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	4a81      	ldr	r2, [pc, #516]	; (8002110 <HAL_I2C_Init+0x274>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d807      	bhi.n	8001f20 <HAL_I2C_Init+0x84>
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	4a80      	ldr	r2, [pc, #512]	; (8002114 <HAL_I2C_Init+0x278>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	bf94      	ite	ls
 8001f18:	2301      	movls	r3, #1
 8001f1a:	2300      	movhi	r3, #0
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	e006      	b.n	8001f2e <HAL_I2C_Init+0x92>
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	4a7d      	ldr	r2, [pc, #500]	; (8002118 <HAL_I2C_Init+0x27c>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	bf94      	ite	ls
 8001f28:	2301      	movls	r3, #1
 8001f2a:	2300      	movhi	r3, #0
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e0e7      	b.n	8002106 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	4a78      	ldr	r2, [pc, #480]	; (800211c <HAL_I2C_Init+0x280>)
 8001f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f3e:	0c9b      	lsrs	r3, r3, #18
 8001f40:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	68ba      	ldr	r2, [r7, #8]
 8001f52:	430a      	orrs	r2, r1
 8001f54:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	6a1b      	ldr	r3, [r3, #32]
 8001f5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	4a6a      	ldr	r2, [pc, #424]	; (8002110 <HAL_I2C_Init+0x274>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d802      	bhi.n	8001f70 <HAL_I2C_Init+0xd4>
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	e009      	b.n	8001f84 <HAL_I2C_Init+0xe8>
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f76:	fb02 f303 	mul.w	r3, r2, r3
 8001f7a:	4a69      	ldr	r2, [pc, #420]	; (8002120 <HAL_I2C_Init+0x284>)
 8001f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f80:	099b      	lsrs	r3, r3, #6
 8001f82:	3301      	adds	r3, #1
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	6812      	ldr	r2, [r2, #0]
 8001f88:	430b      	orrs	r3, r1
 8001f8a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f96:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	495c      	ldr	r1, [pc, #368]	; (8002110 <HAL_I2C_Init+0x274>)
 8001fa0:	428b      	cmp	r3, r1
 8001fa2:	d819      	bhi.n	8001fd8 <HAL_I2C_Init+0x13c>
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	1e59      	subs	r1, r3, #1
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fb2:	1c59      	adds	r1, r3, #1
 8001fb4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001fb8:	400b      	ands	r3, r1
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00a      	beq.n	8001fd4 <HAL_I2C_Init+0x138>
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	1e59      	subs	r1, r3, #1
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fcc:	3301      	adds	r3, #1
 8001fce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fd2:	e051      	b.n	8002078 <HAL_I2C_Init+0x1dc>
 8001fd4:	2304      	movs	r3, #4
 8001fd6:	e04f      	b.n	8002078 <HAL_I2C_Init+0x1dc>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d111      	bne.n	8002004 <HAL_I2C_Init+0x168>
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	1e58      	subs	r0, r3, #1
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6859      	ldr	r1, [r3, #4]
 8001fe8:	460b      	mov	r3, r1
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	440b      	add	r3, r1
 8001fee:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	bf0c      	ite	eq
 8001ffc:	2301      	moveq	r3, #1
 8001ffe:	2300      	movne	r3, #0
 8002000:	b2db      	uxtb	r3, r3
 8002002:	e012      	b.n	800202a <HAL_I2C_Init+0x18e>
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	1e58      	subs	r0, r3, #1
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6859      	ldr	r1, [r3, #4]
 800200c:	460b      	mov	r3, r1
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	440b      	add	r3, r1
 8002012:	0099      	lsls	r1, r3, #2
 8002014:	440b      	add	r3, r1
 8002016:	fbb0 f3f3 	udiv	r3, r0, r3
 800201a:	3301      	adds	r3, #1
 800201c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002020:	2b00      	cmp	r3, #0
 8002022:	bf0c      	ite	eq
 8002024:	2301      	moveq	r3, #1
 8002026:	2300      	movne	r3, #0
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <HAL_I2C_Init+0x196>
 800202e:	2301      	movs	r3, #1
 8002030:	e022      	b.n	8002078 <HAL_I2C_Init+0x1dc>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d10e      	bne.n	8002058 <HAL_I2C_Init+0x1bc>
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	1e58      	subs	r0, r3, #1
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6859      	ldr	r1, [r3, #4]
 8002042:	460b      	mov	r3, r1
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	440b      	add	r3, r1
 8002048:	fbb0 f3f3 	udiv	r3, r0, r3
 800204c:	3301      	adds	r3, #1
 800204e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002052:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002056:	e00f      	b.n	8002078 <HAL_I2C_Init+0x1dc>
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	1e58      	subs	r0, r3, #1
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6859      	ldr	r1, [r3, #4]
 8002060:	460b      	mov	r3, r1
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	440b      	add	r3, r1
 8002066:	0099      	lsls	r1, r3, #2
 8002068:	440b      	add	r3, r1
 800206a:	fbb0 f3f3 	udiv	r3, r0, r3
 800206e:	3301      	adds	r3, #1
 8002070:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002074:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002078:	6879      	ldr	r1, [r7, #4]
 800207a:	6809      	ldr	r1, [r1, #0]
 800207c:	4313      	orrs	r3, r2
 800207e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	69da      	ldr	r2, [r3, #28]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a1b      	ldr	r3, [r3, #32]
 8002092:	431a      	orrs	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	430a      	orrs	r2, r1
 800209a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80020a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	6911      	ldr	r1, [r2, #16]
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	68d2      	ldr	r2, [r2, #12]
 80020b2:	4311      	orrs	r1, r2
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	6812      	ldr	r2, [r2, #0]
 80020b8:	430b      	orrs	r3, r1
 80020ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	695a      	ldr	r2, [r3, #20]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	431a      	orrs	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	430a      	orrs	r2, r1
 80020d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f042 0201 	orr.w	r2, r2, #1
 80020e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2220      	movs	r2, #32
 80020f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	000186a0 	.word	0x000186a0
 8002114:	001e847f 	.word	0x001e847f
 8002118:	003d08ff 	.word	0x003d08ff
 800211c:	431bde83 	.word	0x431bde83
 8002120:	10624dd3 	.word	0x10624dd3

08002124 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b088      	sub	sp, #32
 8002128:	af02      	add	r7, sp, #8
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	4608      	mov	r0, r1
 800212e:	4611      	mov	r1, r2
 8002130:	461a      	mov	r2, r3
 8002132:	4603      	mov	r3, r0
 8002134:	817b      	strh	r3, [r7, #10]
 8002136:	460b      	mov	r3, r1
 8002138:	813b      	strh	r3, [r7, #8]
 800213a:	4613      	mov	r3, r2
 800213c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800213e:	f7ff fbfb 	bl	8001938 <HAL_GetTick>
 8002142:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800214a:	b2db      	uxtb	r3, r3
 800214c:	2b20      	cmp	r3, #32
 800214e:	f040 80d9 	bne.w	8002304 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	9300      	str	r3, [sp, #0]
 8002156:	2319      	movs	r3, #25
 8002158:	2201      	movs	r2, #1
 800215a:	496d      	ldr	r1, [pc, #436]	; (8002310 <HAL_I2C_Mem_Write+0x1ec>)
 800215c:	68f8      	ldr	r0, [r7, #12]
 800215e:	f000 fc7f 	bl	8002a60 <I2C_WaitOnFlagUntilTimeout>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002168:	2302      	movs	r3, #2
 800216a:	e0cc      	b.n	8002306 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002172:	2b01      	cmp	r3, #1
 8002174:	d101      	bne.n	800217a <HAL_I2C_Mem_Write+0x56>
 8002176:	2302      	movs	r3, #2
 8002178:	e0c5      	b.n	8002306 <HAL_I2C_Mem_Write+0x1e2>
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2201      	movs	r2, #1
 800217e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0301 	and.w	r3, r3, #1
 800218c:	2b01      	cmp	r3, #1
 800218e:	d007      	beq.n	80021a0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f042 0201 	orr.w	r2, r2, #1
 800219e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2221      	movs	r2, #33	; 0x21
 80021b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2240      	movs	r2, #64	; 0x40
 80021bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2200      	movs	r2, #0
 80021c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6a3a      	ldr	r2, [r7, #32]
 80021ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80021d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	4a4d      	ldr	r2, [pc, #308]	; (8002314 <HAL_I2C_Mem_Write+0x1f0>)
 80021e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80021e2:	88f8      	ldrh	r0, [r7, #6]
 80021e4:	893a      	ldrh	r2, [r7, #8]
 80021e6:	8979      	ldrh	r1, [r7, #10]
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	9301      	str	r3, [sp, #4]
 80021ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ee:	9300      	str	r3, [sp, #0]
 80021f0:	4603      	mov	r3, r0
 80021f2:	68f8      	ldr	r0, [r7, #12]
 80021f4:	f000 fab6 	bl	8002764 <I2C_RequestMemoryWrite>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d052      	beq.n	80022a4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e081      	b.n	8002306 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002206:	68f8      	ldr	r0, [r7, #12]
 8002208:	f000 fd00 	bl	8002c0c <I2C_WaitOnTXEFlagUntilTimeout>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00d      	beq.n	800222e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	2b04      	cmp	r3, #4
 8002218:	d107      	bne.n	800222a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002228:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e06b      	b.n	8002306 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002232:	781a      	ldrb	r2, [r3, #0]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223e:	1c5a      	adds	r2, r3, #1
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002248:	3b01      	subs	r3, #1
 800224a:	b29a      	uxth	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002254:	b29b      	uxth	r3, r3
 8002256:	3b01      	subs	r3, #1
 8002258:	b29a      	uxth	r2, r3
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	695b      	ldr	r3, [r3, #20]
 8002264:	f003 0304 	and.w	r3, r3, #4
 8002268:	2b04      	cmp	r3, #4
 800226a:	d11b      	bne.n	80022a4 <HAL_I2C_Mem_Write+0x180>
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002270:	2b00      	cmp	r3, #0
 8002272:	d017      	beq.n	80022a4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002278:	781a      	ldrb	r2, [r3, #0]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002284:	1c5a      	adds	r2, r3, #1
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800228e:	3b01      	subs	r3, #1
 8002290:	b29a      	uxth	r2, r3
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800229a:	b29b      	uxth	r3, r3
 800229c:	3b01      	subs	r3, #1
 800229e:	b29a      	uxth	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d1aa      	bne.n	8002202 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022ac:	697a      	ldr	r2, [r7, #20]
 80022ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022b0:	68f8      	ldr	r0, [r7, #12]
 80022b2:	f000 fcec 	bl	8002c8e <I2C_WaitOnBTFFlagUntilTimeout>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d00d      	beq.n	80022d8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c0:	2b04      	cmp	r3, #4
 80022c2:	d107      	bne.n	80022d4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022d2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e016      	b.n	8002306 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2220      	movs	r2, #32
 80022ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002300:	2300      	movs	r3, #0
 8002302:	e000      	b.n	8002306 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002304:	2302      	movs	r3, #2
  }
}
 8002306:	4618      	mov	r0, r3
 8002308:	3718      	adds	r7, #24
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	00100002 	.word	0x00100002
 8002314:	ffff0000 	.word	0xffff0000

08002318 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b08c      	sub	sp, #48	; 0x30
 800231c:	af02      	add	r7, sp, #8
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	4608      	mov	r0, r1
 8002322:	4611      	mov	r1, r2
 8002324:	461a      	mov	r2, r3
 8002326:	4603      	mov	r3, r0
 8002328:	817b      	strh	r3, [r7, #10]
 800232a:	460b      	mov	r3, r1
 800232c:	813b      	strh	r3, [r7, #8]
 800232e:	4613      	mov	r3, r2
 8002330:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002332:	f7ff fb01 	bl	8001938 <HAL_GetTick>
 8002336:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800233e:	b2db      	uxtb	r3, r3
 8002340:	2b20      	cmp	r3, #32
 8002342:	f040 8208 	bne.w	8002756 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002348:	9300      	str	r3, [sp, #0]
 800234a:	2319      	movs	r3, #25
 800234c:	2201      	movs	r2, #1
 800234e:	497b      	ldr	r1, [pc, #492]	; (800253c <HAL_I2C_Mem_Read+0x224>)
 8002350:	68f8      	ldr	r0, [r7, #12]
 8002352:	f000 fb85 	bl	8002a60 <I2C_WaitOnFlagUntilTimeout>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800235c:	2302      	movs	r3, #2
 800235e:	e1fb      	b.n	8002758 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002366:	2b01      	cmp	r3, #1
 8002368:	d101      	bne.n	800236e <HAL_I2C_Mem_Read+0x56>
 800236a:	2302      	movs	r3, #2
 800236c:	e1f4      	b.n	8002758 <HAL_I2C_Mem_Read+0x440>
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2201      	movs	r2, #1
 8002372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0301 	and.w	r3, r3, #1
 8002380:	2b01      	cmp	r3, #1
 8002382:	d007      	beq.n	8002394 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f042 0201 	orr.w	r2, r2, #1
 8002392:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2222      	movs	r2, #34	; 0x22
 80023a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2240      	movs	r2, #64	; 0x40
 80023b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2200      	movs	r2, #0
 80023b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80023c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ca:	b29a      	uxth	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	4a5b      	ldr	r2, [pc, #364]	; (8002540 <HAL_I2C_Mem_Read+0x228>)
 80023d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023d6:	88f8      	ldrh	r0, [r7, #6]
 80023d8:	893a      	ldrh	r2, [r7, #8]
 80023da:	8979      	ldrh	r1, [r7, #10]
 80023dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023de:	9301      	str	r3, [sp, #4]
 80023e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023e2:	9300      	str	r3, [sp, #0]
 80023e4:	4603      	mov	r3, r0
 80023e6:	68f8      	ldr	r0, [r7, #12]
 80023e8:	f000 fa52 	bl	8002890 <I2C_RequestMemoryRead>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e1b0      	b.n	8002758 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d113      	bne.n	8002426 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023fe:	2300      	movs	r3, #0
 8002400:	623b      	str	r3, [r7, #32]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	623b      	str	r3, [r7, #32]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	623b      	str	r3, [r7, #32]
 8002412:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	e184      	b.n	8002730 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800242a:	2b01      	cmp	r3, #1
 800242c:	d11b      	bne.n	8002466 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800243c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800243e:	2300      	movs	r3, #0
 8002440:	61fb      	str	r3, [r7, #28]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	695b      	ldr	r3, [r3, #20]
 8002448:	61fb      	str	r3, [r7, #28]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	61fb      	str	r3, [r7, #28]
 8002452:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	e164      	b.n	8002730 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800246a:	2b02      	cmp	r3, #2
 800246c:	d11b      	bne.n	80024a6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800247c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800248c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800248e:	2300      	movs	r3, #0
 8002490:	61bb      	str	r3, [r7, #24]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	695b      	ldr	r3, [r3, #20]
 8002498:	61bb      	str	r3, [r7, #24]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	61bb      	str	r3, [r7, #24]
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	e144      	b.n	8002730 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024a6:	2300      	movs	r3, #0
 80024a8:	617b      	str	r3, [r7, #20]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	695b      	ldr	r3, [r3, #20]
 80024b0:	617b      	str	r3, [r7, #20]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	617b      	str	r3, [r7, #20]
 80024ba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80024bc:	e138      	b.n	8002730 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c2:	2b03      	cmp	r3, #3
 80024c4:	f200 80f1 	bhi.w	80026aa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d123      	bne.n	8002518 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80024d4:	68f8      	ldr	r0, [r7, #12]
 80024d6:	f000 fc1b 	bl	8002d10 <I2C_WaitOnRXNEFlagUntilTimeout>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e139      	b.n	8002758 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	691a      	ldr	r2, [r3, #16]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ee:	b2d2      	uxtb	r2, r2
 80024f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f6:	1c5a      	adds	r2, r3, #1
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002500:	3b01      	subs	r3, #1
 8002502:	b29a      	uxth	r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800250c:	b29b      	uxth	r3, r3
 800250e:	3b01      	subs	r3, #1
 8002510:	b29a      	uxth	r2, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002516:	e10b      	b.n	8002730 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800251c:	2b02      	cmp	r3, #2
 800251e:	d14e      	bne.n	80025be <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002522:	9300      	str	r3, [sp, #0]
 8002524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002526:	2200      	movs	r2, #0
 8002528:	4906      	ldr	r1, [pc, #24]	; (8002544 <HAL_I2C_Mem_Read+0x22c>)
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	f000 fa98 	bl	8002a60 <I2C_WaitOnFlagUntilTimeout>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d008      	beq.n	8002548 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e10e      	b.n	8002758 <HAL_I2C_Mem_Read+0x440>
 800253a:	bf00      	nop
 800253c:	00100002 	.word	0x00100002
 8002540:	ffff0000 	.word	0xffff0000
 8002544:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002556:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	691a      	ldr	r2, [r3, #16]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002562:	b2d2      	uxtb	r2, r2
 8002564:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256a:	1c5a      	adds	r2, r3, #1
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002574:	3b01      	subs	r3, #1
 8002576:	b29a      	uxth	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002580:	b29b      	uxth	r3, r3
 8002582:	3b01      	subs	r3, #1
 8002584:	b29a      	uxth	r2, r3
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	691a      	ldr	r2, [r3, #16]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002594:	b2d2      	uxtb	r2, r2
 8002596:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259c:	1c5a      	adds	r2, r3, #1
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a6:	3b01      	subs	r3, #1
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	3b01      	subs	r3, #1
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025bc:	e0b8      	b.n	8002730 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c0:	9300      	str	r3, [sp, #0]
 80025c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025c4:	2200      	movs	r2, #0
 80025c6:	4966      	ldr	r1, [pc, #408]	; (8002760 <HAL_I2C_Mem_Read+0x448>)
 80025c8:	68f8      	ldr	r0, [r7, #12]
 80025ca:	f000 fa49 	bl	8002a60 <I2C_WaitOnFlagUntilTimeout>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d001      	beq.n	80025d8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e0bf      	b.n	8002758 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	691a      	ldr	r2, [r3, #16]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f2:	b2d2      	uxtb	r2, r2
 80025f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fa:	1c5a      	adds	r2, r3, #1
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002604:	3b01      	subs	r3, #1
 8002606:	b29a      	uxth	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002610:	b29b      	uxth	r3, r3
 8002612:	3b01      	subs	r3, #1
 8002614:	b29a      	uxth	r2, r3
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261c:	9300      	str	r3, [sp, #0]
 800261e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002620:	2200      	movs	r2, #0
 8002622:	494f      	ldr	r1, [pc, #316]	; (8002760 <HAL_I2C_Mem_Read+0x448>)
 8002624:	68f8      	ldr	r0, [r7, #12]
 8002626:	f000 fa1b 	bl	8002a60 <I2C_WaitOnFlagUntilTimeout>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e091      	b.n	8002758 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002642:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	691a      	ldr	r2, [r3, #16]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264e:	b2d2      	uxtb	r2, r2
 8002650:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002656:	1c5a      	adds	r2, r3, #1
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002660:	3b01      	subs	r3, #1
 8002662:	b29a      	uxth	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800266c:	b29b      	uxth	r3, r3
 800266e:	3b01      	subs	r3, #1
 8002670:	b29a      	uxth	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	691a      	ldr	r2, [r3, #16]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002680:	b2d2      	uxtb	r2, r2
 8002682:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002688:	1c5a      	adds	r2, r3, #1
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002692:	3b01      	subs	r3, #1
 8002694:	b29a      	uxth	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800269e:	b29b      	uxth	r3, r3
 80026a0:	3b01      	subs	r3, #1
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026a8:	e042      	b.n	8002730 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80026ae:	68f8      	ldr	r0, [r7, #12]
 80026b0:	f000 fb2e 	bl	8002d10 <I2C_WaitOnRXNEFlagUntilTimeout>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e04c      	b.n	8002758 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	691a      	ldr	r2, [r3, #16]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c8:	b2d2      	uxtb	r2, r2
 80026ca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d0:	1c5a      	adds	r2, r3, #1
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026da:	3b01      	subs	r3, #1
 80026dc:	b29a      	uxth	r2, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	3b01      	subs	r3, #1
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	f003 0304 	and.w	r3, r3, #4
 80026fa:	2b04      	cmp	r3, #4
 80026fc:	d118      	bne.n	8002730 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	691a      	ldr	r2, [r3, #16]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002708:	b2d2      	uxtb	r2, r2
 800270a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002710:	1c5a      	adds	r2, r3, #1
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800271a:	3b01      	subs	r3, #1
 800271c:	b29a      	uxth	r2, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002726:	b29b      	uxth	r3, r3
 8002728:	3b01      	subs	r3, #1
 800272a:	b29a      	uxth	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002734:	2b00      	cmp	r3, #0
 8002736:	f47f aec2 	bne.w	80024be <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2220      	movs	r2, #32
 800273e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002752:	2300      	movs	r3, #0
 8002754:	e000      	b.n	8002758 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002756:	2302      	movs	r3, #2
  }
}
 8002758:	4618      	mov	r0, r3
 800275a:	3728      	adds	r7, #40	; 0x28
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	00010004 	.word	0x00010004

08002764 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b088      	sub	sp, #32
 8002768:	af02      	add	r7, sp, #8
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	4608      	mov	r0, r1
 800276e:	4611      	mov	r1, r2
 8002770:	461a      	mov	r2, r3
 8002772:	4603      	mov	r3, r0
 8002774:	817b      	strh	r3, [r7, #10]
 8002776:	460b      	mov	r3, r1
 8002778:	813b      	strh	r3, [r7, #8]
 800277a:	4613      	mov	r3, r2
 800277c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800278c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800278e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002790:	9300      	str	r3, [sp, #0]
 8002792:	6a3b      	ldr	r3, [r7, #32]
 8002794:	2200      	movs	r2, #0
 8002796:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800279a:	68f8      	ldr	r0, [r7, #12]
 800279c:	f000 f960 	bl	8002a60 <I2C_WaitOnFlagUntilTimeout>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00d      	beq.n	80027c2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027b4:	d103      	bne.n	80027be <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e05f      	b.n	8002882 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027c2:	897b      	ldrh	r3, [r7, #10]
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	461a      	mov	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80027d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d4:	6a3a      	ldr	r2, [r7, #32]
 80027d6:	492d      	ldr	r1, [pc, #180]	; (800288c <I2C_RequestMemoryWrite+0x128>)
 80027d8:	68f8      	ldr	r0, [r7, #12]
 80027da:	f000 f998 	bl	8002b0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e04c      	b.n	8002882 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027e8:	2300      	movs	r3, #0
 80027ea:	617b      	str	r3, [r7, #20]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	617b      	str	r3, [r7, #20]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	617b      	str	r3, [r7, #20]
 80027fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002800:	6a39      	ldr	r1, [r7, #32]
 8002802:	68f8      	ldr	r0, [r7, #12]
 8002804:	f000 fa02 	bl	8002c0c <I2C_WaitOnTXEFlagUntilTimeout>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00d      	beq.n	800282a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	2b04      	cmp	r3, #4
 8002814:	d107      	bne.n	8002826 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002824:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e02b      	b.n	8002882 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800282a:	88fb      	ldrh	r3, [r7, #6]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d105      	bne.n	800283c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002830:	893b      	ldrh	r3, [r7, #8]
 8002832:	b2da      	uxtb	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	611a      	str	r2, [r3, #16]
 800283a:	e021      	b.n	8002880 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800283c:	893b      	ldrh	r3, [r7, #8]
 800283e:	0a1b      	lsrs	r3, r3, #8
 8002840:	b29b      	uxth	r3, r3
 8002842:	b2da      	uxtb	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800284a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800284c:	6a39      	ldr	r1, [r7, #32]
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f000 f9dc 	bl	8002c0c <I2C_WaitOnTXEFlagUntilTimeout>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d00d      	beq.n	8002876 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	2b04      	cmp	r3, #4
 8002860:	d107      	bne.n	8002872 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002870:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e005      	b.n	8002882 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002876:	893b      	ldrh	r3, [r7, #8]
 8002878:	b2da      	uxtb	r2, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3718      	adds	r7, #24
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	00010002 	.word	0x00010002

08002890 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b088      	sub	sp, #32
 8002894:	af02      	add	r7, sp, #8
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	4608      	mov	r0, r1
 800289a:	4611      	mov	r1, r2
 800289c:	461a      	mov	r2, r3
 800289e:	4603      	mov	r3, r0
 80028a0:	817b      	strh	r3, [r7, #10]
 80028a2:	460b      	mov	r3, r1
 80028a4:	813b      	strh	r3, [r7, #8]
 80028a6:	4613      	mov	r3, r2
 80028a8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80028b8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	9300      	str	r3, [sp, #0]
 80028ce:	6a3b      	ldr	r3, [r7, #32]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f000 f8c2 	bl	8002a60 <I2C_WaitOnFlagUntilTimeout>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00d      	beq.n	80028fe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028f0:	d103      	bne.n	80028fa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e0aa      	b.n	8002a54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028fe:	897b      	ldrh	r3, [r7, #10]
 8002900:	b2db      	uxtb	r3, r3
 8002902:	461a      	mov	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800290c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800290e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002910:	6a3a      	ldr	r2, [r7, #32]
 8002912:	4952      	ldr	r1, [pc, #328]	; (8002a5c <I2C_RequestMemoryRead+0x1cc>)
 8002914:	68f8      	ldr	r0, [r7, #12]
 8002916:	f000 f8fa 	bl	8002b0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e097      	b.n	8002a54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002924:	2300      	movs	r3, #0
 8002926:	617b      	str	r3, [r7, #20]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	617b      	str	r3, [r7, #20]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	617b      	str	r3, [r7, #20]
 8002938:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800293a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800293c:	6a39      	ldr	r1, [r7, #32]
 800293e:	68f8      	ldr	r0, [r7, #12]
 8002940:	f000 f964 	bl	8002c0c <I2C_WaitOnTXEFlagUntilTimeout>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00d      	beq.n	8002966 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	2b04      	cmp	r3, #4
 8002950:	d107      	bne.n	8002962 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002960:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e076      	b.n	8002a54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002966:	88fb      	ldrh	r3, [r7, #6]
 8002968:	2b01      	cmp	r3, #1
 800296a:	d105      	bne.n	8002978 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800296c:	893b      	ldrh	r3, [r7, #8]
 800296e:	b2da      	uxtb	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	611a      	str	r2, [r3, #16]
 8002976:	e021      	b.n	80029bc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002978:	893b      	ldrh	r3, [r7, #8]
 800297a:	0a1b      	lsrs	r3, r3, #8
 800297c:	b29b      	uxth	r3, r3
 800297e:	b2da      	uxtb	r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002988:	6a39      	ldr	r1, [r7, #32]
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f000 f93e 	bl	8002c0c <I2C_WaitOnTXEFlagUntilTimeout>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00d      	beq.n	80029b2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	2b04      	cmp	r3, #4
 800299c:	d107      	bne.n	80029ae <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e050      	b.n	8002a54 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80029b2:	893b      	ldrh	r3, [r7, #8]
 80029b4:	b2da      	uxtb	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029be:	6a39      	ldr	r1, [r7, #32]
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f000 f923 	bl	8002c0c <I2C_WaitOnTXEFlagUntilTimeout>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00d      	beq.n	80029e8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d0:	2b04      	cmp	r3, #4
 80029d2:	d107      	bne.n	80029e4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029e2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e035      	b.n	8002a54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029f6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fa:	9300      	str	r3, [sp, #0]
 80029fc:	6a3b      	ldr	r3, [r7, #32]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a04:	68f8      	ldr	r0, [r7, #12]
 8002a06:	f000 f82b 	bl	8002a60 <I2C_WaitOnFlagUntilTimeout>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00d      	beq.n	8002a2c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a1e:	d103      	bne.n	8002a28 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a26:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e013      	b.n	8002a54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002a2c:	897b      	ldrh	r3, [r7, #10]
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	f043 0301 	orr.w	r3, r3, #1
 8002a34:	b2da      	uxtb	r2, r3
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3e:	6a3a      	ldr	r2, [r7, #32]
 8002a40:	4906      	ldr	r1, [pc, #24]	; (8002a5c <I2C_RequestMemoryRead+0x1cc>)
 8002a42:	68f8      	ldr	r0, [r7, #12]
 8002a44:	f000 f863 	bl	8002b0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e000      	b.n	8002a54 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3718      	adds	r7, #24
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	00010002 	.word	0x00010002

08002a60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	603b      	str	r3, [r7, #0]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a70:	e025      	b.n	8002abe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a78:	d021      	beq.n	8002abe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a7a:	f7fe ff5d 	bl	8001938 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	683a      	ldr	r2, [r7, #0]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d302      	bcc.n	8002a90 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d116      	bne.n	8002abe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2200      	movs	r2, #0
 8002a94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2220      	movs	r2, #32
 8002a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	f043 0220 	orr.w	r2, r3, #32
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e023      	b.n	8002b06 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	0c1b      	lsrs	r3, r3, #16
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d10d      	bne.n	8002ae4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	43da      	mvns	r2, r3
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	bf0c      	ite	eq
 8002ada:	2301      	moveq	r3, #1
 8002adc:	2300      	movne	r3, #0
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	e00c      	b.n	8002afe <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	43da      	mvns	r2, r3
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	4013      	ands	r3, r2
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	bf0c      	ite	eq
 8002af6:	2301      	moveq	r3, #1
 8002af8:	2300      	movne	r3, #0
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	461a      	mov	r2, r3
 8002afe:	79fb      	ldrb	r3, [r7, #7]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d0b6      	beq.n	8002a72 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b084      	sub	sp, #16
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	60f8      	str	r0, [r7, #12]
 8002b16:	60b9      	str	r1, [r7, #8]
 8002b18:	607a      	str	r2, [r7, #4]
 8002b1a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b1c:	e051      	b.n	8002bc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	695b      	ldr	r3, [r3, #20]
 8002b24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b2c:	d123      	bne.n	8002b76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b3c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b46:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2220      	movs	r2, #32
 8002b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b62:	f043 0204 	orr.w	r2, r3, #4
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e046      	b.n	8002c04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b7c:	d021      	beq.n	8002bc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b7e:	f7fe fedb 	bl	8001938 <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d302      	bcc.n	8002b94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d116      	bne.n	8002bc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2200      	movs	r2, #0
 8002b98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2220      	movs	r2, #32
 8002b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	f043 0220 	orr.w	r2, r3, #32
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e020      	b.n	8002c04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	0c1b      	lsrs	r3, r3, #16
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d10c      	bne.n	8002be6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	43da      	mvns	r2, r3
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	bf14      	ite	ne
 8002bde:	2301      	movne	r3, #1
 8002be0:	2300      	moveq	r3, #0
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	e00b      	b.n	8002bfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	43da      	mvns	r2, r3
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	bf14      	ite	ne
 8002bf8:	2301      	movne	r3, #1
 8002bfa:	2300      	moveq	r3, #0
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d18d      	bne.n	8002b1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3710      	adds	r7, #16
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c18:	e02d      	b.n	8002c76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	f000 f8ce 	bl	8002dbc <I2C_IsAcknowledgeFailed>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e02d      	b.n	8002c86 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c30:	d021      	beq.n	8002c76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c32:	f7fe fe81 	bl	8001938 <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	68ba      	ldr	r2, [r7, #8]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d302      	bcc.n	8002c48 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d116      	bne.n	8002c76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2220      	movs	r2, #32
 8002c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	f043 0220 	orr.w	r2, r3, #32
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e007      	b.n	8002c86 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	695b      	ldr	r3, [r3, #20]
 8002c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c80:	2b80      	cmp	r3, #128	; 0x80
 8002c82:	d1ca      	bne.n	8002c1a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b084      	sub	sp, #16
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	60f8      	str	r0, [r7, #12]
 8002c96:	60b9      	str	r1, [r7, #8]
 8002c98:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c9a:	e02d      	b.n	8002cf8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c9c:	68f8      	ldr	r0, [r7, #12]
 8002c9e:	f000 f88d 	bl	8002dbc <I2C_IsAcknowledgeFailed>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d001      	beq.n	8002cac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e02d      	b.n	8002d08 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb2:	d021      	beq.n	8002cf8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cb4:	f7fe fe40 	bl	8001938 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	68ba      	ldr	r2, [r7, #8]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d302      	bcc.n	8002cca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d116      	bne.n	8002cf8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2220      	movs	r2, #32
 8002cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce4:	f043 0220 	orr.w	r2, r3, #32
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e007      	b.n	8002d08 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	f003 0304 	and.w	r3, r3, #4
 8002d02:	2b04      	cmp	r3, #4
 8002d04:	d1ca      	bne.n	8002c9c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3710      	adds	r7, #16
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d1c:	e042      	b.n	8002da4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	695b      	ldr	r3, [r3, #20]
 8002d24:	f003 0310 	and.w	r3, r3, #16
 8002d28:	2b10      	cmp	r3, #16
 8002d2a:	d119      	bne.n	8002d60 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f06f 0210 	mvn.w	r2, #16
 8002d34:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2220      	movs	r2, #32
 8002d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e029      	b.n	8002db4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d60:	f7fe fdea 	bl	8001938 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	68ba      	ldr	r2, [r7, #8]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d302      	bcc.n	8002d76 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d116      	bne.n	8002da4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2220      	movs	r2, #32
 8002d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d90:	f043 0220 	orr.w	r2, r3, #32
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e007      	b.n	8002db4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dae:	2b40      	cmp	r3, #64	; 0x40
 8002db0:	d1b5      	bne.n	8002d1e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3710      	adds	r7, #16
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dd2:	d11b      	bne.n	8002e0c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ddc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2220      	movs	r2, #32
 8002de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df8:	f043 0204 	orr.w	r2, r3, #4
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e000      	b.n	8002e0e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
	...

08002e1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e267      	b.n	80032fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d075      	beq.n	8002f26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e3a:	4b88      	ldr	r3, [pc, #544]	; (800305c <HAL_RCC_OscConfig+0x240>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f003 030c 	and.w	r3, r3, #12
 8002e42:	2b04      	cmp	r3, #4
 8002e44:	d00c      	beq.n	8002e60 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e46:	4b85      	ldr	r3, [pc, #532]	; (800305c <HAL_RCC_OscConfig+0x240>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e4e:	2b08      	cmp	r3, #8
 8002e50:	d112      	bne.n	8002e78 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e52:	4b82      	ldr	r3, [pc, #520]	; (800305c <HAL_RCC_OscConfig+0x240>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e5e:	d10b      	bne.n	8002e78 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e60:	4b7e      	ldr	r3, [pc, #504]	; (800305c <HAL_RCC_OscConfig+0x240>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d05b      	beq.n	8002f24 <HAL_RCC_OscConfig+0x108>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d157      	bne.n	8002f24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e242      	b.n	80032fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e80:	d106      	bne.n	8002e90 <HAL_RCC_OscConfig+0x74>
 8002e82:	4b76      	ldr	r3, [pc, #472]	; (800305c <HAL_RCC_OscConfig+0x240>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a75      	ldr	r2, [pc, #468]	; (800305c <HAL_RCC_OscConfig+0x240>)
 8002e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e8c:	6013      	str	r3, [r2, #0]
 8002e8e:	e01d      	b.n	8002ecc <HAL_RCC_OscConfig+0xb0>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e98:	d10c      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x98>
 8002e9a:	4b70      	ldr	r3, [pc, #448]	; (800305c <HAL_RCC_OscConfig+0x240>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a6f      	ldr	r2, [pc, #444]	; (800305c <HAL_RCC_OscConfig+0x240>)
 8002ea0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ea4:	6013      	str	r3, [r2, #0]
 8002ea6:	4b6d      	ldr	r3, [pc, #436]	; (800305c <HAL_RCC_OscConfig+0x240>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a6c      	ldr	r2, [pc, #432]	; (800305c <HAL_RCC_OscConfig+0x240>)
 8002eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eb0:	6013      	str	r3, [r2, #0]
 8002eb2:	e00b      	b.n	8002ecc <HAL_RCC_OscConfig+0xb0>
 8002eb4:	4b69      	ldr	r3, [pc, #420]	; (800305c <HAL_RCC_OscConfig+0x240>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a68      	ldr	r2, [pc, #416]	; (800305c <HAL_RCC_OscConfig+0x240>)
 8002eba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ebe:	6013      	str	r3, [r2, #0]
 8002ec0:	4b66      	ldr	r3, [pc, #408]	; (800305c <HAL_RCC_OscConfig+0x240>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a65      	ldr	r2, [pc, #404]	; (800305c <HAL_RCC_OscConfig+0x240>)
 8002ec6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d013      	beq.n	8002efc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed4:	f7fe fd30 	bl	8001938 <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eda:	e008      	b.n	8002eee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002edc:	f7fe fd2c 	bl	8001938 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b64      	cmp	r3, #100	; 0x64
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e207      	b.n	80032fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eee:	4b5b      	ldr	r3, [pc, #364]	; (800305c <HAL_RCC_OscConfig+0x240>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d0f0      	beq.n	8002edc <HAL_RCC_OscConfig+0xc0>
 8002efa:	e014      	b.n	8002f26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002efc:	f7fe fd1c 	bl	8001938 <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f04:	f7fe fd18 	bl	8001938 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b64      	cmp	r3, #100	; 0x64
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e1f3      	b.n	80032fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f16:	4b51      	ldr	r3, [pc, #324]	; (800305c <HAL_RCC_OscConfig+0x240>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1f0      	bne.n	8002f04 <HAL_RCC_OscConfig+0xe8>
 8002f22:	e000      	b.n	8002f26 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d063      	beq.n	8002ffa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f32:	4b4a      	ldr	r3, [pc, #296]	; (800305c <HAL_RCC_OscConfig+0x240>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f003 030c 	and.w	r3, r3, #12
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00b      	beq.n	8002f56 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f3e:	4b47      	ldr	r3, [pc, #284]	; (800305c <HAL_RCC_OscConfig+0x240>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f46:	2b08      	cmp	r3, #8
 8002f48:	d11c      	bne.n	8002f84 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f4a:	4b44      	ldr	r3, [pc, #272]	; (800305c <HAL_RCC_OscConfig+0x240>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d116      	bne.n	8002f84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f56:	4b41      	ldr	r3, [pc, #260]	; (800305c <HAL_RCC_OscConfig+0x240>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d005      	beq.n	8002f6e <HAL_RCC_OscConfig+0x152>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d001      	beq.n	8002f6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e1c7      	b.n	80032fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f6e:	4b3b      	ldr	r3, [pc, #236]	; (800305c <HAL_RCC_OscConfig+0x240>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	00db      	lsls	r3, r3, #3
 8002f7c:	4937      	ldr	r1, [pc, #220]	; (800305c <HAL_RCC_OscConfig+0x240>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f82:	e03a      	b.n	8002ffa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d020      	beq.n	8002fce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f8c:	4b34      	ldr	r3, [pc, #208]	; (8003060 <HAL_RCC_OscConfig+0x244>)
 8002f8e:	2201      	movs	r2, #1
 8002f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f92:	f7fe fcd1 	bl	8001938 <HAL_GetTick>
 8002f96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f98:	e008      	b.n	8002fac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f9a:	f7fe fccd 	bl	8001938 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e1a8      	b.n	80032fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fac:	4b2b      	ldr	r3, [pc, #172]	; (800305c <HAL_RCC_OscConfig+0x240>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d0f0      	beq.n	8002f9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fb8:	4b28      	ldr	r3, [pc, #160]	; (800305c <HAL_RCC_OscConfig+0x240>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	4925      	ldr	r1, [pc, #148]	; (800305c <HAL_RCC_OscConfig+0x240>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	600b      	str	r3, [r1, #0]
 8002fcc:	e015      	b.n	8002ffa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fce:	4b24      	ldr	r3, [pc, #144]	; (8003060 <HAL_RCC_OscConfig+0x244>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd4:	f7fe fcb0 	bl	8001938 <HAL_GetTick>
 8002fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fda:	e008      	b.n	8002fee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fdc:	f7fe fcac 	bl	8001938 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e187      	b.n	80032fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fee:	4b1b      	ldr	r3, [pc, #108]	; (800305c <HAL_RCC_OscConfig+0x240>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1f0      	bne.n	8002fdc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0308 	and.w	r3, r3, #8
 8003002:	2b00      	cmp	r3, #0
 8003004:	d036      	beq.n	8003074 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d016      	beq.n	800303c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800300e:	4b15      	ldr	r3, [pc, #84]	; (8003064 <HAL_RCC_OscConfig+0x248>)
 8003010:	2201      	movs	r2, #1
 8003012:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003014:	f7fe fc90 	bl	8001938 <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800301a:	e008      	b.n	800302e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800301c:	f7fe fc8c 	bl	8001938 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e167      	b.n	80032fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800302e:	4b0b      	ldr	r3, [pc, #44]	; (800305c <HAL_RCC_OscConfig+0x240>)
 8003030:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d0f0      	beq.n	800301c <HAL_RCC_OscConfig+0x200>
 800303a:	e01b      	b.n	8003074 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800303c:	4b09      	ldr	r3, [pc, #36]	; (8003064 <HAL_RCC_OscConfig+0x248>)
 800303e:	2200      	movs	r2, #0
 8003040:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003042:	f7fe fc79 	bl	8001938 <HAL_GetTick>
 8003046:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003048:	e00e      	b.n	8003068 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800304a:	f7fe fc75 	bl	8001938 <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	2b02      	cmp	r3, #2
 8003056:	d907      	bls.n	8003068 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e150      	b.n	80032fe <HAL_RCC_OscConfig+0x4e2>
 800305c:	40023800 	.word	0x40023800
 8003060:	42470000 	.word	0x42470000
 8003064:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003068:	4b88      	ldr	r3, [pc, #544]	; (800328c <HAL_RCC_OscConfig+0x470>)
 800306a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1ea      	bne.n	800304a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0304 	and.w	r3, r3, #4
 800307c:	2b00      	cmp	r3, #0
 800307e:	f000 8097 	beq.w	80031b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003082:	2300      	movs	r3, #0
 8003084:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003086:	4b81      	ldr	r3, [pc, #516]	; (800328c <HAL_RCC_OscConfig+0x470>)
 8003088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d10f      	bne.n	80030b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003092:	2300      	movs	r3, #0
 8003094:	60bb      	str	r3, [r7, #8]
 8003096:	4b7d      	ldr	r3, [pc, #500]	; (800328c <HAL_RCC_OscConfig+0x470>)
 8003098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309a:	4a7c      	ldr	r2, [pc, #496]	; (800328c <HAL_RCC_OscConfig+0x470>)
 800309c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030a0:	6413      	str	r3, [r2, #64]	; 0x40
 80030a2:	4b7a      	ldr	r3, [pc, #488]	; (800328c <HAL_RCC_OscConfig+0x470>)
 80030a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030aa:	60bb      	str	r3, [r7, #8]
 80030ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030ae:	2301      	movs	r3, #1
 80030b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b2:	4b77      	ldr	r3, [pc, #476]	; (8003290 <HAL_RCC_OscConfig+0x474>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d118      	bne.n	80030f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030be:	4b74      	ldr	r3, [pc, #464]	; (8003290 <HAL_RCC_OscConfig+0x474>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a73      	ldr	r2, [pc, #460]	; (8003290 <HAL_RCC_OscConfig+0x474>)
 80030c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030ca:	f7fe fc35 	bl	8001938 <HAL_GetTick>
 80030ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d0:	e008      	b.n	80030e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030d2:	f7fe fc31 	bl	8001938 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d901      	bls.n	80030e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e10c      	b.n	80032fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e4:	4b6a      	ldr	r3, [pc, #424]	; (8003290 <HAL_RCC_OscConfig+0x474>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d0f0      	beq.n	80030d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d106      	bne.n	8003106 <HAL_RCC_OscConfig+0x2ea>
 80030f8:	4b64      	ldr	r3, [pc, #400]	; (800328c <HAL_RCC_OscConfig+0x470>)
 80030fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030fc:	4a63      	ldr	r2, [pc, #396]	; (800328c <HAL_RCC_OscConfig+0x470>)
 80030fe:	f043 0301 	orr.w	r3, r3, #1
 8003102:	6713      	str	r3, [r2, #112]	; 0x70
 8003104:	e01c      	b.n	8003140 <HAL_RCC_OscConfig+0x324>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	2b05      	cmp	r3, #5
 800310c:	d10c      	bne.n	8003128 <HAL_RCC_OscConfig+0x30c>
 800310e:	4b5f      	ldr	r3, [pc, #380]	; (800328c <HAL_RCC_OscConfig+0x470>)
 8003110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003112:	4a5e      	ldr	r2, [pc, #376]	; (800328c <HAL_RCC_OscConfig+0x470>)
 8003114:	f043 0304 	orr.w	r3, r3, #4
 8003118:	6713      	str	r3, [r2, #112]	; 0x70
 800311a:	4b5c      	ldr	r3, [pc, #368]	; (800328c <HAL_RCC_OscConfig+0x470>)
 800311c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800311e:	4a5b      	ldr	r2, [pc, #364]	; (800328c <HAL_RCC_OscConfig+0x470>)
 8003120:	f043 0301 	orr.w	r3, r3, #1
 8003124:	6713      	str	r3, [r2, #112]	; 0x70
 8003126:	e00b      	b.n	8003140 <HAL_RCC_OscConfig+0x324>
 8003128:	4b58      	ldr	r3, [pc, #352]	; (800328c <HAL_RCC_OscConfig+0x470>)
 800312a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800312c:	4a57      	ldr	r2, [pc, #348]	; (800328c <HAL_RCC_OscConfig+0x470>)
 800312e:	f023 0301 	bic.w	r3, r3, #1
 8003132:	6713      	str	r3, [r2, #112]	; 0x70
 8003134:	4b55      	ldr	r3, [pc, #340]	; (800328c <HAL_RCC_OscConfig+0x470>)
 8003136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003138:	4a54      	ldr	r2, [pc, #336]	; (800328c <HAL_RCC_OscConfig+0x470>)
 800313a:	f023 0304 	bic.w	r3, r3, #4
 800313e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d015      	beq.n	8003174 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003148:	f7fe fbf6 	bl	8001938 <HAL_GetTick>
 800314c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800314e:	e00a      	b.n	8003166 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003150:	f7fe fbf2 	bl	8001938 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	f241 3288 	movw	r2, #5000	; 0x1388
 800315e:	4293      	cmp	r3, r2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e0cb      	b.n	80032fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003166:	4b49      	ldr	r3, [pc, #292]	; (800328c <HAL_RCC_OscConfig+0x470>)
 8003168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d0ee      	beq.n	8003150 <HAL_RCC_OscConfig+0x334>
 8003172:	e014      	b.n	800319e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003174:	f7fe fbe0 	bl	8001938 <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800317a:	e00a      	b.n	8003192 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800317c:	f7fe fbdc 	bl	8001938 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	f241 3288 	movw	r2, #5000	; 0x1388
 800318a:	4293      	cmp	r3, r2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e0b5      	b.n	80032fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003192:	4b3e      	ldr	r3, [pc, #248]	; (800328c <HAL_RCC_OscConfig+0x470>)
 8003194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1ee      	bne.n	800317c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800319e:	7dfb      	ldrb	r3, [r7, #23]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d105      	bne.n	80031b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031a4:	4b39      	ldr	r3, [pc, #228]	; (800328c <HAL_RCC_OscConfig+0x470>)
 80031a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a8:	4a38      	ldr	r2, [pc, #224]	; (800328c <HAL_RCC_OscConfig+0x470>)
 80031aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	f000 80a1 	beq.w	80032fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031ba:	4b34      	ldr	r3, [pc, #208]	; (800328c <HAL_RCC_OscConfig+0x470>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f003 030c 	and.w	r3, r3, #12
 80031c2:	2b08      	cmp	r3, #8
 80031c4:	d05c      	beq.n	8003280 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d141      	bne.n	8003252 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ce:	4b31      	ldr	r3, [pc, #196]	; (8003294 <HAL_RCC_OscConfig+0x478>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d4:	f7fe fbb0 	bl	8001938 <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031dc:	f7fe fbac 	bl	8001938 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e087      	b.n	80032fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ee:	4b27      	ldr	r3, [pc, #156]	; (800328c <HAL_RCC_OscConfig+0x470>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1f0      	bne.n	80031dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	69da      	ldr	r2, [r3, #28]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	431a      	orrs	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003208:	019b      	lsls	r3, r3, #6
 800320a:	431a      	orrs	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003210:	085b      	lsrs	r3, r3, #1
 8003212:	3b01      	subs	r3, #1
 8003214:	041b      	lsls	r3, r3, #16
 8003216:	431a      	orrs	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321c:	061b      	lsls	r3, r3, #24
 800321e:	491b      	ldr	r1, [pc, #108]	; (800328c <HAL_RCC_OscConfig+0x470>)
 8003220:	4313      	orrs	r3, r2
 8003222:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003224:	4b1b      	ldr	r3, [pc, #108]	; (8003294 <HAL_RCC_OscConfig+0x478>)
 8003226:	2201      	movs	r2, #1
 8003228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800322a:	f7fe fb85 	bl	8001938 <HAL_GetTick>
 800322e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003230:	e008      	b.n	8003244 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003232:	f7fe fb81 	bl	8001938 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b02      	cmp	r3, #2
 800323e:	d901      	bls.n	8003244 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e05c      	b.n	80032fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003244:	4b11      	ldr	r3, [pc, #68]	; (800328c <HAL_RCC_OscConfig+0x470>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d0f0      	beq.n	8003232 <HAL_RCC_OscConfig+0x416>
 8003250:	e054      	b.n	80032fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003252:	4b10      	ldr	r3, [pc, #64]	; (8003294 <HAL_RCC_OscConfig+0x478>)
 8003254:	2200      	movs	r2, #0
 8003256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003258:	f7fe fb6e 	bl	8001938 <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003260:	f7fe fb6a 	bl	8001938 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e045      	b.n	80032fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003272:	4b06      	ldr	r3, [pc, #24]	; (800328c <HAL_RCC_OscConfig+0x470>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1f0      	bne.n	8003260 <HAL_RCC_OscConfig+0x444>
 800327e:	e03d      	b.n	80032fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	699b      	ldr	r3, [r3, #24]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d107      	bne.n	8003298 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e038      	b.n	80032fe <HAL_RCC_OscConfig+0x4e2>
 800328c:	40023800 	.word	0x40023800
 8003290:	40007000 	.word	0x40007000
 8003294:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003298:	4b1b      	ldr	r3, [pc, #108]	; (8003308 <HAL_RCC_OscConfig+0x4ec>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d028      	beq.n	80032f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d121      	bne.n	80032f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032be:	429a      	cmp	r2, r3
 80032c0:	d11a      	bne.n	80032f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032c8:	4013      	ands	r3, r2
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d111      	bne.n	80032f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032de:	085b      	lsrs	r3, r3, #1
 80032e0:	3b01      	subs	r3, #1
 80032e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d107      	bne.n	80032f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d001      	beq.n	80032fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e000      	b.n	80032fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3718      	adds	r7, #24
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	40023800 	.word	0x40023800

0800330c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d101      	bne.n	8003320 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e0cc      	b.n	80034ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003320:	4b68      	ldr	r3, [pc, #416]	; (80034c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0307 	and.w	r3, r3, #7
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	429a      	cmp	r2, r3
 800332c:	d90c      	bls.n	8003348 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800332e:	4b65      	ldr	r3, [pc, #404]	; (80034c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003330:	683a      	ldr	r2, [r7, #0]
 8003332:	b2d2      	uxtb	r2, r2
 8003334:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003336:	4b63      	ldr	r3, [pc, #396]	; (80034c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0307 	and.w	r3, r3, #7
 800333e:	683a      	ldr	r2, [r7, #0]
 8003340:	429a      	cmp	r2, r3
 8003342:	d001      	beq.n	8003348 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e0b8      	b.n	80034ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d020      	beq.n	8003396 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0304 	and.w	r3, r3, #4
 800335c:	2b00      	cmp	r3, #0
 800335e:	d005      	beq.n	800336c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003360:	4b59      	ldr	r3, [pc, #356]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	4a58      	ldr	r2, [pc, #352]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003366:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800336a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0308 	and.w	r3, r3, #8
 8003374:	2b00      	cmp	r3, #0
 8003376:	d005      	beq.n	8003384 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003378:	4b53      	ldr	r3, [pc, #332]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	4a52      	ldr	r2, [pc, #328]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 800337e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003382:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003384:	4b50      	ldr	r3, [pc, #320]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	494d      	ldr	r1, [pc, #308]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003392:	4313      	orrs	r3, r2
 8003394:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d044      	beq.n	800342c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d107      	bne.n	80033ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033aa:	4b47      	ldr	r3, [pc, #284]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d119      	bne.n	80033ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e07f      	b.n	80034ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d003      	beq.n	80033ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033c6:	2b03      	cmp	r3, #3
 80033c8:	d107      	bne.n	80033da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ca:	4b3f      	ldr	r3, [pc, #252]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d109      	bne.n	80033ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e06f      	b.n	80034ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033da:	4b3b      	ldr	r3, [pc, #236]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e067      	b.n	80034ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033ea:	4b37      	ldr	r3, [pc, #220]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f023 0203 	bic.w	r2, r3, #3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	4934      	ldr	r1, [pc, #208]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033fc:	f7fe fa9c 	bl	8001938 <HAL_GetTick>
 8003400:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003402:	e00a      	b.n	800341a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003404:	f7fe fa98 	bl	8001938 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003412:	4293      	cmp	r3, r2
 8003414:	d901      	bls.n	800341a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e04f      	b.n	80034ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800341a:	4b2b      	ldr	r3, [pc, #172]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f003 020c 	and.w	r2, r3, #12
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	429a      	cmp	r2, r3
 800342a:	d1eb      	bne.n	8003404 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800342c:	4b25      	ldr	r3, [pc, #148]	; (80034c4 <HAL_RCC_ClockConfig+0x1b8>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0307 	and.w	r3, r3, #7
 8003434:	683a      	ldr	r2, [r7, #0]
 8003436:	429a      	cmp	r2, r3
 8003438:	d20c      	bcs.n	8003454 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800343a:	4b22      	ldr	r3, [pc, #136]	; (80034c4 <HAL_RCC_ClockConfig+0x1b8>)
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	b2d2      	uxtb	r2, r2
 8003440:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003442:	4b20      	ldr	r3, [pc, #128]	; (80034c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0307 	and.w	r3, r3, #7
 800344a:	683a      	ldr	r2, [r7, #0]
 800344c:	429a      	cmp	r2, r3
 800344e:	d001      	beq.n	8003454 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e032      	b.n	80034ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0304 	and.w	r3, r3, #4
 800345c:	2b00      	cmp	r3, #0
 800345e:	d008      	beq.n	8003472 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003460:	4b19      	ldr	r3, [pc, #100]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	4916      	ldr	r1, [pc, #88]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 800346e:	4313      	orrs	r3, r2
 8003470:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0308 	and.w	r3, r3, #8
 800347a:	2b00      	cmp	r3, #0
 800347c:	d009      	beq.n	8003492 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800347e:	4b12      	ldr	r3, [pc, #72]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	490e      	ldr	r1, [pc, #56]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 800348e:	4313      	orrs	r3, r2
 8003490:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003492:	f000 f821 	bl	80034d8 <HAL_RCC_GetSysClockFreq>
 8003496:	4602      	mov	r2, r0
 8003498:	4b0b      	ldr	r3, [pc, #44]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	091b      	lsrs	r3, r3, #4
 800349e:	f003 030f 	and.w	r3, r3, #15
 80034a2:	490a      	ldr	r1, [pc, #40]	; (80034cc <HAL_RCC_ClockConfig+0x1c0>)
 80034a4:	5ccb      	ldrb	r3, [r1, r3]
 80034a6:	fa22 f303 	lsr.w	r3, r2, r3
 80034aa:	4a09      	ldr	r2, [pc, #36]	; (80034d0 <HAL_RCC_ClockConfig+0x1c4>)
 80034ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034ae:	4b09      	ldr	r3, [pc, #36]	; (80034d4 <HAL_RCC_ClockConfig+0x1c8>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7fe f9fc 	bl	80018b0 <HAL_InitTick>

  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3710      	adds	r7, #16
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	40023c00 	.word	0x40023c00
 80034c8:	40023800 	.word	0x40023800
 80034cc:	08003dc8 	.word	0x08003dc8
 80034d0:	20000090 	.word	0x20000090
 80034d4:	20000094 	.word	0x20000094

080034d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034dc:	b090      	sub	sp, #64	; 0x40
 80034de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80034e0:	2300      	movs	r3, #0
 80034e2:	637b      	str	r3, [r7, #52]	; 0x34
 80034e4:	2300      	movs	r3, #0
 80034e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034e8:	2300      	movs	r3, #0
 80034ea:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80034ec:	2300      	movs	r3, #0
 80034ee:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034f0:	4b59      	ldr	r3, [pc, #356]	; (8003658 <HAL_RCC_GetSysClockFreq+0x180>)
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f003 030c 	and.w	r3, r3, #12
 80034f8:	2b08      	cmp	r3, #8
 80034fa:	d00d      	beq.n	8003518 <HAL_RCC_GetSysClockFreq+0x40>
 80034fc:	2b08      	cmp	r3, #8
 80034fe:	f200 80a1 	bhi.w	8003644 <HAL_RCC_GetSysClockFreq+0x16c>
 8003502:	2b00      	cmp	r3, #0
 8003504:	d002      	beq.n	800350c <HAL_RCC_GetSysClockFreq+0x34>
 8003506:	2b04      	cmp	r3, #4
 8003508:	d003      	beq.n	8003512 <HAL_RCC_GetSysClockFreq+0x3a>
 800350a:	e09b      	b.n	8003644 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800350c:	4b53      	ldr	r3, [pc, #332]	; (800365c <HAL_RCC_GetSysClockFreq+0x184>)
 800350e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003510:	e09b      	b.n	800364a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003512:	4b53      	ldr	r3, [pc, #332]	; (8003660 <HAL_RCC_GetSysClockFreq+0x188>)
 8003514:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003516:	e098      	b.n	800364a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003518:	4b4f      	ldr	r3, [pc, #316]	; (8003658 <HAL_RCC_GetSysClockFreq+0x180>)
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003520:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003522:	4b4d      	ldr	r3, [pc, #308]	; (8003658 <HAL_RCC_GetSysClockFreq+0x180>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d028      	beq.n	8003580 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800352e:	4b4a      	ldr	r3, [pc, #296]	; (8003658 <HAL_RCC_GetSysClockFreq+0x180>)
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	099b      	lsrs	r3, r3, #6
 8003534:	2200      	movs	r2, #0
 8003536:	623b      	str	r3, [r7, #32]
 8003538:	627a      	str	r2, [r7, #36]	; 0x24
 800353a:	6a3b      	ldr	r3, [r7, #32]
 800353c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003540:	2100      	movs	r1, #0
 8003542:	4b47      	ldr	r3, [pc, #284]	; (8003660 <HAL_RCC_GetSysClockFreq+0x188>)
 8003544:	fb03 f201 	mul.w	r2, r3, r1
 8003548:	2300      	movs	r3, #0
 800354a:	fb00 f303 	mul.w	r3, r0, r3
 800354e:	4413      	add	r3, r2
 8003550:	4a43      	ldr	r2, [pc, #268]	; (8003660 <HAL_RCC_GetSysClockFreq+0x188>)
 8003552:	fba0 1202 	umull	r1, r2, r0, r2
 8003556:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003558:	460a      	mov	r2, r1
 800355a:	62ba      	str	r2, [r7, #40]	; 0x28
 800355c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800355e:	4413      	add	r3, r2
 8003560:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003564:	2200      	movs	r2, #0
 8003566:	61bb      	str	r3, [r7, #24]
 8003568:	61fa      	str	r2, [r7, #28]
 800356a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800356e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003572:	f7fd fa95 	bl	8000aa0 <__aeabi_uldivmod>
 8003576:	4602      	mov	r2, r0
 8003578:	460b      	mov	r3, r1
 800357a:	4613      	mov	r3, r2
 800357c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800357e:	e053      	b.n	8003628 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003580:	4b35      	ldr	r3, [pc, #212]	; (8003658 <HAL_RCC_GetSysClockFreq+0x180>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	099b      	lsrs	r3, r3, #6
 8003586:	2200      	movs	r2, #0
 8003588:	613b      	str	r3, [r7, #16]
 800358a:	617a      	str	r2, [r7, #20]
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003592:	f04f 0b00 	mov.w	fp, #0
 8003596:	4652      	mov	r2, sl
 8003598:	465b      	mov	r3, fp
 800359a:	f04f 0000 	mov.w	r0, #0
 800359e:	f04f 0100 	mov.w	r1, #0
 80035a2:	0159      	lsls	r1, r3, #5
 80035a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035a8:	0150      	lsls	r0, r2, #5
 80035aa:	4602      	mov	r2, r0
 80035ac:	460b      	mov	r3, r1
 80035ae:	ebb2 080a 	subs.w	r8, r2, sl
 80035b2:	eb63 090b 	sbc.w	r9, r3, fp
 80035b6:	f04f 0200 	mov.w	r2, #0
 80035ba:	f04f 0300 	mov.w	r3, #0
 80035be:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80035c2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80035c6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80035ca:	ebb2 0408 	subs.w	r4, r2, r8
 80035ce:	eb63 0509 	sbc.w	r5, r3, r9
 80035d2:	f04f 0200 	mov.w	r2, #0
 80035d6:	f04f 0300 	mov.w	r3, #0
 80035da:	00eb      	lsls	r3, r5, #3
 80035dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035e0:	00e2      	lsls	r2, r4, #3
 80035e2:	4614      	mov	r4, r2
 80035e4:	461d      	mov	r5, r3
 80035e6:	eb14 030a 	adds.w	r3, r4, sl
 80035ea:	603b      	str	r3, [r7, #0]
 80035ec:	eb45 030b 	adc.w	r3, r5, fp
 80035f0:	607b      	str	r3, [r7, #4]
 80035f2:	f04f 0200 	mov.w	r2, #0
 80035f6:	f04f 0300 	mov.w	r3, #0
 80035fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035fe:	4629      	mov	r1, r5
 8003600:	028b      	lsls	r3, r1, #10
 8003602:	4621      	mov	r1, r4
 8003604:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003608:	4621      	mov	r1, r4
 800360a:	028a      	lsls	r2, r1, #10
 800360c:	4610      	mov	r0, r2
 800360e:	4619      	mov	r1, r3
 8003610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003612:	2200      	movs	r2, #0
 8003614:	60bb      	str	r3, [r7, #8]
 8003616:	60fa      	str	r2, [r7, #12]
 8003618:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800361c:	f7fd fa40 	bl	8000aa0 <__aeabi_uldivmod>
 8003620:	4602      	mov	r2, r0
 8003622:	460b      	mov	r3, r1
 8003624:	4613      	mov	r3, r2
 8003626:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003628:	4b0b      	ldr	r3, [pc, #44]	; (8003658 <HAL_RCC_GetSysClockFreq+0x180>)
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	0c1b      	lsrs	r3, r3, #16
 800362e:	f003 0303 	and.w	r3, r3, #3
 8003632:	3301      	adds	r3, #1
 8003634:	005b      	lsls	r3, r3, #1
 8003636:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003638:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800363a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800363c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003640:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003642:	e002      	b.n	800364a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003644:	4b05      	ldr	r3, [pc, #20]	; (800365c <HAL_RCC_GetSysClockFreq+0x184>)
 8003646:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003648:	bf00      	nop
    }
  }
  return sysclockfreq;
 800364a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800364c:	4618      	mov	r0, r3
 800364e:	3740      	adds	r7, #64	; 0x40
 8003650:	46bd      	mov	sp, r7
 8003652:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003656:	bf00      	nop
 8003658:	40023800 	.word	0x40023800
 800365c:	00f42400 	.word	0x00f42400
 8003660:	017d7840 	.word	0x017d7840

08003664 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003664:	b480      	push	{r7}
 8003666:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003668:	4b03      	ldr	r3, [pc, #12]	; (8003678 <HAL_RCC_GetHCLKFreq+0x14>)
 800366a:	681b      	ldr	r3, [r3, #0]
}
 800366c:	4618      	mov	r0, r3
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	20000090 	.word	0x20000090

0800367c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003680:	f7ff fff0 	bl	8003664 <HAL_RCC_GetHCLKFreq>
 8003684:	4602      	mov	r2, r0
 8003686:	4b05      	ldr	r3, [pc, #20]	; (800369c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	0a9b      	lsrs	r3, r3, #10
 800368c:	f003 0307 	and.w	r3, r3, #7
 8003690:	4903      	ldr	r1, [pc, #12]	; (80036a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003692:	5ccb      	ldrb	r3, [r1, r3]
 8003694:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003698:	4618      	mov	r0, r3
 800369a:	bd80      	pop	{r7, pc}
 800369c:	40023800 	.word	0x40023800
 80036a0:	08003dd8 	.word	0x08003dd8

080036a4 <__errno>:
 80036a4:	4b01      	ldr	r3, [pc, #4]	; (80036ac <__errno+0x8>)
 80036a6:	6818      	ldr	r0, [r3, #0]
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	2000009c 	.word	0x2000009c

080036b0 <__libc_init_array>:
 80036b0:	b570      	push	{r4, r5, r6, lr}
 80036b2:	4d0d      	ldr	r5, [pc, #52]	; (80036e8 <__libc_init_array+0x38>)
 80036b4:	4c0d      	ldr	r4, [pc, #52]	; (80036ec <__libc_init_array+0x3c>)
 80036b6:	1b64      	subs	r4, r4, r5
 80036b8:	10a4      	asrs	r4, r4, #2
 80036ba:	2600      	movs	r6, #0
 80036bc:	42a6      	cmp	r6, r4
 80036be:	d109      	bne.n	80036d4 <__libc_init_array+0x24>
 80036c0:	4d0b      	ldr	r5, [pc, #44]	; (80036f0 <__libc_init_array+0x40>)
 80036c2:	4c0c      	ldr	r4, [pc, #48]	; (80036f4 <__libc_init_array+0x44>)
 80036c4:	f000 fb74 	bl	8003db0 <_init>
 80036c8:	1b64      	subs	r4, r4, r5
 80036ca:	10a4      	asrs	r4, r4, #2
 80036cc:	2600      	movs	r6, #0
 80036ce:	42a6      	cmp	r6, r4
 80036d0:	d105      	bne.n	80036de <__libc_init_array+0x2e>
 80036d2:	bd70      	pop	{r4, r5, r6, pc}
 80036d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80036d8:	4798      	blx	r3
 80036da:	3601      	adds	r6, #1
 80036dc:	e7ee      	b.n	80036bc <__libc_init_array+0xc>
 80036de:	f855 3b04 	ldr.w	r3, [r5], #4
 80036e2:	4798      	blx	r3
 80036e4:	3601      	adds	r6, #1
 80036e6:	e7f2      	b.n	80036ce <__libc_init_array+0x1e>
 80036e8:	08003e58 	.word	0x08003e58
 80036ec:	08003e58 	.word	0x08003e58
 80036f0:	08003e58 	.word	0x08003e58
 80036f4:	08003e5c 	.word	0x08003e5c

080036f8 <memset>:
 80036f8:	4402      	add	r2, r0
 80036fa:	4603      	mov	r3, r0
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d100      	bne.n	8003702 <memset+0xa>
 8003700:	4770      	bx	lr
 8003702:	f803 1b01 	strb.w	r1, [r3], #1
 8003706:	e7f9      	b.n	80036fc <memset+0x4>

08003708 <atan>:
 8003708:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800370c:	ec55 4b10 	vmov	r4, r5, d0
 8003710:	4bc3      	ldr	r3, [pc, #780]	; (8003a20 <atan+0x318>)
 8003712:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8003716:	429e      	cmp	r6, r3
 8003718:	46ab      	mov	fp, r5
 800371a:	dd18      	ble.n	800374e <atan+0x46>
 800371c:	4bc1      	ldr	r3, [pc, #772]	; (8003a24 <atan+0x31c>)
 800371e:	429e      	cmp	r6, r3
 8003720:	dc01      	bgt.n	8003726 <atan+0x1e>
 8003722:	d109      	bne.n	8003738 <atan+0x30>
 8003724:	b144      	cbz	r4, 8003738 <atan+0x30>
 8003726:	4622      	mov	r2, r4
 8003728:	462b      	mov	r3, r5
 800372a:	4620      	mov	r0, r4
 800372c:	4629      	mov	r1, r5
 800372e:	f7fc fd51 	bl	80001d4 <__adddf3>
 8003732:	4604      	mov	r4, r0
 8003734:	460d      	mov	r5, r1
 8003736:	e006      	b.n	8003746 <atan+0x3e>
 8003738:	f1bb 0f00 	cmp.w	fp, #0
 800373c:	f300 8131 	bgt.w	80039a2 <atan+0x29a>
 8003740:	a59b      	add	r5, pc, #620	; (adr r5, 80039b0 <atan+0x2a8>)
 8003742:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003746:	ec45 4b10 	vmov	d0, r4, r5
 800374a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800374e:	4bb6      	ldr	r3, [pc, #728]	; (8003a28 <atan+0x320>)
 8003750:	429e      	cmp	r6, r3
 8003752:	dc14      	bgt.n	800377e <atan+0x76>
 8003754:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8003758:	429e      	cmp	r6, r3
 800375a:	dc0d      	bgt.n	8003778 <atan+0x70>
 800375c:	a396      	add	r3, pc, #600	; (adr r3, 80039b8 <atan+0x2b0>)
 800375e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003762:	ee10 0a10 	vmov	r0, s0
 8003766:	4629      	mov	r1, r5
 8003768:	f7fc fd34 	bl	80001d4 <__adddf3>
 800376c:	4baf      	ldr	r3, [pc, #700]	; (8003a2c <atan+0x324>)
 800376e:	2200      	movs	r2, #0
 8003770:	f7fd f976 	bl	8000a60 <__aeabi_dcmpgt>
 8003774:	2800      	cmp	r0, #0
 8003776:	d1e6      	bne.n	8003746 <atan+0x3e>
 8003778:	f04f 3aff 	mov.w	sl, #4294967295
 800377c:	e02b      	b.n	80037d6 <atan+0xce>
 800377e:	f000 f963 	bl	8003a48 <fabs>
 8003782:	4bab      	ldr	r3, [pc, #684]	; (8003a30 <atan+0x328>)
 8003784:	429e      	cmp	r6, r3
 8003786:	ec55 4b10 	vmov	r4, r5, d0
 800378a:	f300 80bf 	bgt.w	800390c <atan+0x204>
 800378e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8003792:	429e      	cmp	r6, r3
 8003794:	f300 80a0 	bgt.w	80038d8 <atan+0x1d0>
 8003798:	ee10 2a10 	vmov	r2, s0
 800379c:	ee10 0a10 	vmov	r0, s0
 80037a0:	462b      	mov	r3, r5
 80037a2:	4629      	mov	r1, r5
 80037a4:	f7fc fd16 	bl	80001d4 <__adddf3>
 80037a8:	4ba0      	ldr	r3, [pc, #640]	; (8003a2c <atan+0x324>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	f7fc fd10 	bl	80001d0 <__aeabi_dsub>
 80037b0:	2200      	movs	r2, #0
 80037b2:	4606      	mov	r6, r0
 80037b4:	460f      	mov	r7, r1
 80037b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80037ba:	4620      	mov	r0, r4
 80037bc:	4629      	mov	r1, r5
 80037be:	f7fc fd09 	bl	80001d4 <__adddf3>
 80037c2:	4602      	mov	r2, r0
 80037c4:	460b      	mov	r3, r1
 80037c6:	4630      	mov	r0, r6
 80037c8:	4639      	mov	r1, r7
 80037ca:	f7fc ffe3 	bl	8000794 <__aeabi_ddiv>
 80037ce:	f04f 0a00 	mov.w	sl, #0
 80037d2:	4604      	mov	r4, r0
 80037d4:	460d      	mov	r5, r1
 80037d6:	4622      	mov	r2, r4
 80037d8:	462b      	mov	r3, r5
 80037da:	4620      	mov	r0, r4
 80037dc:	4629      	mov	r1, r5
 80037de:	f7fc feaf 	bl	8000540 <__aeabi_dmul>
 80037e2:	4602      	mov	r2, r0
 80037e4:	460b      	mov	r3, r1
 80037e6:	4680      	mov	r8, r0
 80037e8:	4689      	mov	r9, r1
 80037ea:	f7fc fea9 	bl	8000540 <__aeabi_dmul>
 80037ee:	a374      	add	r3, pc, #464	; (adr r3, 80039c0 <atan+0x2b8>)
 80037f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f4:	4606      	mov	r6, r0
 80037f6:	460f      	mov	r7, r1
 80037f8:	f7fc fea2 	bl	8000540 <__aeabi_dmul>
 80037fc:	a372      	add	r3, pc, #456	; (adr r3, 80039c8 <atan+0x2c0>)
 80037fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003802:	f7fc fce7 	bl	80001d4 <__adddf3>
 8003806:	4632      	mov	r2, r6
 8003808:	463b      	mov	r3, r7
 800380a:	f7fc fe99 	bl	8000540 <__aeabi_dmul>
 800380e:	a370      	add	r3, pc, #448	; (adr r3, 80039d0 <atan+0x2c8>)
 8003810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003814:	f7fc fcde 	bl	80001d4 <__adddf3>
 8003818:	4632      	mov	r2, r6
 800381a:	463b      	mov	r3, r7
 800381c:	f7fc fe90 	bl	8000540 <__aeabi_dmul>
 8003820:	a36d      	add	r3, pc, #436	; (adr r3, 80039d8 <atan+0x2d0>)
 8003822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003826:	f7fc fcd5 	bl	80001d4 <__adddf3>
 800382a:	4632      	mov	r2, r6
 800382c:	463b      	mov	r3, r7
 800382e:	f7fc fe87 	bl	8000540 <__aeabi_dmul>
 8003832:	a36b      	add	r3, pc, #428	; (adr r3, 80039e0 <atan+0x2d8>)
 8003834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003838:	f7fc fccc 	bl	80001d4 <__adddf3>
 800383c:	4632      	mov	r2, r6
 800383e:	463b      	mov	r3, r7
 8003840:	f7fc fe7e 	bl	8000540 <__aeabi_dmul>
 8003844:	a368      	add	r3, pc, #416	; (adr r3, 80039e8 <atan+0x2e0>)
 8003846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800384a:	f7fc fcc3 	bl	80001d4 <__adddf3>
 800384e:	4642      	mov	r2, r8
 8003850:	464b      	mov	r3, r9
 8003852:	f7fc fe75 	bl	8000540 <__aeabi_dmul>
 8003856:	a366      	add	r3, pc, #408	; (adr r3, 80039f0 <atan+0x2e8>)
 8003858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800385c:	4680      	mov	r8, r0
 800385e:	4689      	mov	r9, r1
 8003860:	4630      	mov	r0, r6
 8003862:	4639      	mov	r1, r7
 8003864:	f7fc fe6c 	bl	8000540 <__aeabi_dmul>
 8003868:	a363      	add	r3, pc, #396	; (adr r3, 80039f8 <atan+0x2f0>)
 800386a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800386e:	f7fc fcaf 	bl	80001d0 <__aeabi_dsub>
 8003872:	4632      	mov	r2, r6
 8003874:	463b      	mov	r3, r7
 8003876:	f7fc fe63 	bl	8000540 <__aeabi_dmul>
 800387a:	a361      	add	r3, pc, #388	; (adr r3, 8003a00 <atan+0x2f8>)
 800387c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003880:	f7fc fca6 	bl	80001d0 <__aeabi_dsub>
 8003884:	4632      	mov	r2, r6
 8003886:	463b      	mov	r3, r7
 8003888:	f7fc fe5a 	bl	8000540 <__aeabi_dmul>
 800388c:	a35e      	add	r3, pc, #376	; (adr r3, 8003a08 <atan+0x300>)
 800388e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003892:	f7fc fc9d 	bl	80001d0 <__aeabi_dsub>
 8003896:	4632      	mov	r2, r6
 8003898:	463b      	mov	r3, r7
 800389a:	f7fc fe51 	bl	8000540 <__aeabi_dmul>
 800389e:	a35c      	add	r3, pc, #368	; (adr r3, 8003a10 <atan+0x308>)
 80038a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a4:	f7fc fc94 	bl	80001d0 <__aeabi_dsub>
 80038a8:	4632      	mov	r2, r6
 80038aa:	463b      	mov	r3, r7
 80038ac:	f7fc fe48 	bl	8000540 <__aeabi_dmul>
 80038b0:	4602      	mov	r2, r0
 80038b2:	460b      	mov	r3, r1
 80038b4:	4640      	mov	r0, r8
 80038b6:	4649      	mov	r1, r9
 80038b8:	f7fc fc8c 	bl	80001d4 <__adddf3>
 80038bc:	4622      	mov	r2, r4
 80038be:	462b      	mov	r3, r5
 80038c0:	f7fc fe3e 	bl	8000540 <__aeabi_dmul>
 80038c4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80038c8:	4602      	mov	r2, r0
 80038ca:	460b      	mov	r3, r1
 80038cc:	d14b      	bne.n	8003966 <atan+0x25e>
 80038ce:	4620      	mov	r0, r4
 80038d0:	4629      	mov	r1, r5
 80038d2:	f7fc fc7d 	bl	80001d0 <__aeabi_dsub>
 80038d6:	e72c      	b.n	8003732 <atan+0x2a>
 80038d8:	ee10 0a10 	vmov	r0, s0
 80038dc:	4b53      	ldr	r3, [pc, #332]	; (8003a2c <atan+0x324>)
 80038de:	2200      	movs	r2, #0
 80038e0:	4629      	mov	r1, r5
 80038e2:	f7fc fc75 	bl	80001d0 <__aeabi_dsub>
 80038e6:	4b51      	ldr	r3, [pc, #324]	; (8003a2c <atan+0x324>)
 80038e8:	4606      	mov	r6, r0
 80038ea:	460f      	mov	r7, r1
 80038ec:	2200      	movs	r2, #0
 80038ee:	4620      	mov	r0, r4
 80038f0:	4629      	mov	r1, r5
 80038f2:	f7fc fc6f 	bl	80001d4 <__adddf3>
 80038f6:	4602      	mov	r2, r0
 80038f8:	460b      	mov	r3, r1
 80038fa:	4630      	mov	r0, r6
 80038fc:	4639      	mov	r1, r7
 80038fe:	f7fc ff49 	bl	8000794 <__aeabi_ddiv>
 8003902:	f04f 0a01 	mov.w	sl, #1
 8003906:	4604      	mov	r4, r0
 8003908:	460d      	mov	r5, r1
 800390a:	e764      	b.n	80037d6 <atan+0xce>
 800390c:	4b49      	ldr	r3, [pc, #292]	; (8003a34 <atan+0x32c>)
 800390e:	429e      	cmp	r6, r3
 8003910:	da1d      	bge.n	800394e <atan+0x246>
 8003912:	ee10 0a10 	vmov	r0, s0
 8003916:	4b48      	ldr	r3, [pc, #288]	; (8003a38 <atan+0x330>)
 8003918:	2200      	movs	r2, #0
 800391a:	4629      	mov	r1, r5
 800391c:	f7fc fc58 	bl	80001d0 <__aeabi_dsub>
 8003920:	4b45      	ldr	r3, [pc, #276]	; (8003a38 <atan+0x330>)
 8003922:	4606      	mov	r6, r0
 8003924:	460f      	mov	r7, r1
 8003926:	2200      	movs	r2, #0
 8003928:	4620      	mov	r0, r4
 800392a:	4629      	mov	r1, r5
 800392c:	f7fc fe08 	bl	8000540 <__aeabi_dmul>
 8003930:	4b3e      	ldr	r3, [pc, #248]	; (8003a2c <atan+0x324>)
 8003932:	2200      	movs	r2, #0
 8003934:	f7fc fc4e 	bl	80001d4 <__adddf3>
 8003938:	4602      	mov	r2, r0
 800393a:	460b      	mov	r3, r1
 800393c:	4630      	mov	r0, r6
 800393e:	4639      	mov	r1, r7
 8003940:	f7fc ff28 	bl	8000794 <__aeabi_ddiv>
 8003944:	f04f 0a02 	mov.w	sl, #2
 8003948:	4604      	mov	r4, r0
 800394a:	460d      	mov	r5, r1
 800394c:	e743      	b.n	80037d6 <atan+0xce>
 800394e:	462b      	mov	r3, r5
 8003950:	ee10 2a10 	vmov	r2, s0
 8003954:	4939      	ldr	r1, [pc, #228]	; (8003a3c <atan+0x334>)
 8003956:	2000      	movs	r0, #0
 8003958:	f7fc ff1c 	bl	8000794 <__aeabi_ddiv>
 800395c:	f04f 0a03 	mov.w	sl, #3
 8003960:	4604      	mov	r4, r0
 8003962:	460d      	mov	r5, r1
 8003964:	e737      	b.n	80037d6 <atan+0xce>
 8003966:	4b36      	ldr	r3, [pc, #216]	; (8003a40 <atan+0x338>)
 8003968:	4e36      	ldr	r6, [pc, #216]	; (8003a44 <atan+0x33c>)
 800396a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800396e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8003972:	e9da 2300 	ldrd	r2, r3, [sl]
 8003976:	f7fc fc2b 	bl	80001d0 <__aeabi_dsub>
 800397a:	4622      	mov	r2, r4
 800397c:	462b      	mov	r3, r5
 800397e:	f7fc fc27 	bl	80001d0 <__aeabi_dsub>
 8003982:	4602      	mov	r2, r0
 8003984:	460b      	mov	r3, r1
 8003986:	e9d6 0100 	ldrd	r0, r1, [r6]
 800398a:	f7fc fc21 	bl	80001d0 <__aeabi_dsub>
 800398e:	f1bb 0f00 	cmp.w	fp, #0
 8003992:	4604      	mov	r4, r0
 8003994:	460d      	mov	r5, r1
 8003996:	f6bf aed6 	bge.w	8003746 <atan+0x3e>
 800399a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800399e:	461d      	mov	r5, r3
 80039a0:	e6d1      	b.n	8003746 <atan+0x3e>
 80039a2:	a51d      	add	r5, pc, #116	; (adr r5, 8003a18 <atan+0x310>)
 80039a4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80039a8:	e6cd      	b.n	8003746 <atan+0x3e>
 80039aa:	bf00      	nop
 80039ac:	f3af 8000 	nop.w
 80039b0:	54442d18 	.word	0x54442d18
 80039b4:	bff921fb 	.word	0xbff921fb
 80039b8:	8800759c 	.word	0x8800759c
 80039bc:	7e37e43c 	.word	0x7e37e43c
 80039c0:	e322da11 	.word	0xe322da11
 80039c4:	3f90ad3a 	.word	0x3f90ad3a
 80039c8:	24760deb 	.word	0x24760deb
 80039cc:	3fa97b4b 	.word	0x3fa97b4b
 80039d0:	a0d03d51 	.word	0xa0d03d51
 80039d4:	3fb10d66 	.word	0x3fb10d66
 80039d8:	c54c206e 	.word	0xc54c206e
 80039dc:	3fb745cd 	.word	0x3fb745cd
 80039e0:	920083ff 	.word	0x920083ff
 80039e4:	3fc24924 	.word	0x3fc24924
 80039e8:	5555550d 	.word	0x5555550d
 80039ec:	3fd55555 	.word	0x3fd55555
 80039f0:	2c6a6c2f 	.word	0x2c6a6c2f
 80039f4:	bfa2b444 	.word	0xbfa2b444
 80039f8:	52defd9a 	.word	0x52defd9a
 80039fc:	3fadde2d 	.word	0x3fadde2d
 8003a00:	af749a6d 	.word	0xaf749a6d
 8003a04:	3fb3b0f2 	.word	0x3fb3b0f2
 8003a08:	fe231671 	.word	0xfe231671
 8003a0c:	3fbc71c6 	.word	0x3fbc71c6
 8003a10:	9998ebc4 	.word	0x9998ebc4
 8003a14:	3fc99999 	.word	0x3fc99999
 8003a18:	54442d18 	.word	0x54442d18
 8003a1c:	3ff921fb 	.word	0x3ff921fb
 8003a20:	440fffff 	.word	0x440fffff
 8003a24:	7ff00000 	.word	0x7ff00000
 8003a28:	3fdbffff 	.word	0x3fdbffff
 8003a2c:	3ff00000 	.word	0x3ff00000
 8003a30:	3ff2ffff 	.word	0x3ff2ffff
 8003a34:	40038000 	.word	0x40038000
 8003a38:	3ff80000 	.word	0x3ff80000
 8003a3c:	bff00000 	.word	0xbff00000
 8003a40:	08003e00 	.word	0x08003e00
 8003a44:	08003de0 	.word	0x08003de0

08003a48 <fabs>:
 8003a48:	ec51 0b10 	vmov	r0, r1, d0
 8003a4c:	ee10 2a10 	vmov	r2, s0
 8003a50:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003a54:	ec43 2b10 	vmov	d0, r2, r3
 8003a58:	4770      	bx	lr

08003a5a <atan2>:
 8003a5a:	f000 b82d 	b.w	8003ab8 <__ieee754_atan2>

08003a5e <sqrt>:
 8003a5e:	b538      	push	{r3, r4, r5, lr}
 8003a60:	ed2d 8b02 	vpush	{d8}
 8003a64:	ec55 4b10 	vmov	r4, r5, d0
 8003a68:	f000 f8f0 	bl	8003c4c <__ieee754_sqrt>
 8003a6c:	4622      	mov	r2, r4
 8003a6e:	462b      	mov	r3, r5
 8003a70:	4620      	mov	r0, r4
 8003a72:	4629      	mov	r1, r5
 8003a74:	eeb0 8a40 	vmov.f32	s16, s0
 8003a78:	eef0 8a60 	vmov.f32	s17, s1
 8003a7c:	f7fc fffa 	bl	8000a74 <__aeabi_dcmpun>
 8003a80:	b990      	cbnz	r0, 8003aa8 <sqrt+0x4a>
 8003a82:	2200      	movs	r2, #0
 8003a84:	2300      	movs	r3, #0
 8003a86:	4620      	mov	r0, r4
 8003a88:	4629      	mov	r1, r5
 8003a8a:	f7fc ffcb 	bl	8000a24 <__aeabi_dcmplt>
 8003a8e:	b158      	cbz	r0, 8003aa8 <sqrt+0x4a>
 8003a90:	f7ff fe08 	bl	80036a4 <__errno>
 8003a94:	2321      	movs	r3, #33	; 0x21
 8003a96:	6003      	str	r3, [r0, #0]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	4610      	mov	r0, r2
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	f7fc fe78 	bl	8000794 <__aeabi_ddiv>
 8003aa4:	ec41 0b18 	vmov	d8, r0, r1
 8003aa8:	eeb0 0a48 	vmov.f32	s0, s16
 8003aac:	eef0 0a68 	vmov.f32	s1, s17
 8003ab0:	ecbd 8b02 	vpop	{d8}
 8003ab4:	bd38      	pop	{r3, r4, r5, pc}
	...

08003ab8 <__ieee754_atan2>:
 8003ab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003abc:	ec57 6b11 	vmov	r6, r7, d1
 8003ac0:	4273      	negs	r3, r6
 8003ac2:	f8df e184 	ldr.w	lr, [pc, #388]	; 8003c48 <__ieee754_atan2+0x190>
 8003ac6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8003aca:	4333      	orrs	r3, r6
 8003acc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8003ad0:	4573      	cmp	r3, lr
 8003ad2:	ec51 0b10 	vmov	r0, r1, d0
 8003ad6:	ee11 8a10 	vmov	r8, s2
 8003ada:	d80a      	bhi.n	8003af2 <__ieee754_atan2+0x3a>
 8003adc:	4244      	negs	r4, r0
 8003ade:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003ae2:	4304      	orrs	r4, r0
 8003ae4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8003ae8:	4574      	cmp	r4, lr
 8003aea:	ee10 9a10 	vmov	r9, s0
 8003aee:	468c      	mov	ip, r1
 8003af0:	d907      	bls.n	8003b02 <__ieee754_atan2+0x4a>
 8003af2:	4632      	mov	r2, r6
 8003af4:	463b      	mov	r3, r7
 8003af6:	f7fc fb6d 	bl	80001d4 <__adddf3>
 8003afa:	ec41 0b10 	vmov	d0, r0, r1
 8003afe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b02:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8003b06:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8003b0a:	4334      	orrs	r4, r6
 8003b0c:	d103      	bne.n	8003b16 <__ieee754_atan2+0x5e>
 8003b0e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b12:	f7ff bdf9 	b.w	8003708 <atan>
 8003b16:	17bc      	asrs	r4, r7, #30
 8003b18:	f004 0402 	and.w	r4, r4, #2
 8003b1c:	ea53 0909 	orrs.w	r9, r3, r9
 8003b20:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8003b24:	d107      	bne.n	8003b36 <__ieee754_atan2+0x7e>
 8003b26:	2c02      	cmp	r4, #2
 8003b28:	d060      	beq.n	8003bec <__ieee754_atan2+0x134>
 8003b2a:	2c03      	cmp	r4, #3
 8003b2c:	d1e5      	bne.n	8003afa <__ieee754_atan2+0x42>
 8003b2e:	a142      	add	r1, pc, #264	; (adr r1, 8003c38 <__ieee754_atan2+0x180>)
 8003b30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b34:	e7e1      	b.n	8003afa <__ieee754_atan2+0x42>
 8003b36:	ea52 0808 	orrs.w	r8, r2, r8
 8003b3a:	d106      	bne.n	8003b4a <__ieee754_atan2+0x92>
 8003b3c:	f1bc 0f00 	cmp.w	ip, #0
 8003b40:	da5f      	bge.n	8003c02 <__ieee754_atan2+0x14a>
 8003b42:	a13f      	add	r1, pc, #252	; (adr r1, 8003c40 <__ieee754_atan2+0x188>)
 8003b44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b48:	e7d7      	b.n	8003afa <__ieee754_atan2+0x42>
 8003b4a:	4572      	cmp	r2, lr
 8003b4c:	d10f      	bne.n	8003b6e <__ieee754_atan2+0xb6>
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	f104 34ff 	add.w	r4, r4, #4294967295
 8003b54:	d107      	bne.n	8003b66 <__ieee754_atan2+0xae>
 8003b56:	2c02      	cmp	r4, #2
 8003b58:	d84c      	bhi.n	8003bf4 <__ieee754_atan2+0x13c>
 8003b5a:	4b35      	ldr	r3, [pc, #212]	; (8003c30 <__ieee754_atan2+0x178>)
 8003b5c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8003b60:	e9d4 0100 	ldrd	r0, r1, [r4]
 8003b64:	e7c9      	b.n	8003afa <__ieee754_atan2+0x42>
 8003b66:	2c02      	cmp	r4, #2
 8003b68:	d848      	bhi.n	8003bfc <__ieee754_atan2+0x144>
 8003b6a:	4b32      	ldr	r3, [pc, #200]	; (8003c34 <__ieee754_atan2+0x17c>)
 8003b6c:	e7f6      	b.n	8003b5c <__ieee754_atan2+0xa4>
 8003b6e:	4573      	cmp	r3, lr
 8003b70:	d0e4      	beq.n	8003b3c <__ieee754_atan2+0x84>
 8003b72:	1a9b      	subs	r3, r3, r2
 8003b74:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8003b78:	ea4f 5223 	mov.w	r2, r3, asr #20
 8003b7c:	da1e      	bge.n	8003bbc <__ieee754_atan2+0x104>
 8003b7e:	2f00      	cmp	r7, #0
 8003b80:	da01      	bge.n	8003b86 <__ieee754_atan2+0xce>
 8003b82:	323c      	adds	r2, #60	; 0x3c
 8003b84:	db1e      	blt.n	8003bc4 <__ieee754_atan2+0x10c>
 8003b86:	4632      	mov	r2, r6
 8003b88:	463b      	mov	r3, r7
 8003b8a:	f7fc fe03 	bl	8000794 <__aeabi_ddiv>
 8003b8e:	ec41 0b10 	vmov	d0, r0, r1
 8003b92:	f7ff ff59 	bl	8003a48 <fabs>
 8003b96:	f7ff fdb7 	bl	8003708 <atan>
 8003b9a:	ec51 0b10 	vmov	r0, r1, d0
 8003b9e:	2c01      	cmp	r4, #1
 8003ba0:	d013      	beq.n	8003bca <__ieee754_atan2+0x112>
 8003ba2:	2c02      	cmp	r4, #2
 8003ba4:	d015      	beq.n	8003bd2 <__ieee754_atan2+0x11a>
 8003ba6:	2c00      	cmp	r4, #0
 8003ba8:	d0a7      	beq.n	8003afa <__ieee754_atan2+0x42>
 8003baa:	a319      	add	r3, pc, #100	; (adr r3, 8003c10 <__ieee754_atan2+0x158>)
 8003bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bb0:	f7fc fb0e 	bl	80001d0 <__aeabi_dsub>
 8003bb4:	a318      	add	r3, pc, #96	; (adr r3, 8003c18 <__ieee754_atan2+0x160>)
 8003bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bba:	e014      	b.n	8003be6 <__ieee754_atan2+0x12e>
 8003bbc:	a118      	add	r1, pc, #96	; (adr r1, 8003c20 <__ieee754_atan2+0x168>)
 8003bbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003bc2:	e7ec      	b.n	8003b9e <__ieee754_atan2+0xe6>
 8003bc4:	2000      	movs	r0, #0
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	e7e9      	b.n	8003b9e <__ieee754_atan2+0xe6>
 8003bca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003bce:	4619      	mov	r1, r3
 8003bd0:	e793      	b.n	8003afa <__ieee754_atan2+0x42>
 8003bd2:	a30f      	add	r3, pc, #60	; (adr r3, 8003c10 <__ieee754_atan2+0x158>)
 8003bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd8:	f7fc fafa 	bl	80001d0 <__aeabi_dsub>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	460b      	mov	r3, r1
 8003be0:	a10d      	add	r1, pc, #52	; (adr r1, 8003c18 <__ieee754_atan2+0x160>)
 8003be2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003be6:	f7fc faf3 	bl	80001d0 <__aeabi_dsub>
 8003bea:	e786      	b.n	8003afa <__ieee754_atan2+0x42>
 8003bec:	a10a      	add	r1, pc, #40	; (adr r1, 8003c18 <__ieee754_atan2+0x160>)
 8003bee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003bf2:	e782      	b.n	8003afa <__ieee754_atan2+0x42>
 8003bf4:	a10c      	add	r1, pc, #48	; (adr r1, 8003c28 <__ieee754_atan2+0x170>)
 8003bf6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003bfa:	e77e      	b.n	8003afa <__ieee754_atan2+0x42>
 8003bfc:	2000      	movs	r0, #0
 8003bfe:	2100      	movs	r1, #0
 8003c00:	e77b      	b.n	8003afa <__ieee754_atan2+0x42>
 8003c02:	a107      	add	r1, pc, #28	; (adr r1, 8003c20 <__ieee754_atan2+0x168>)
 8003c04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c08:	e777      	b.n	8003afa <__ieee754_atan2+0x42>
 8003c0a:	bf00      	nop
 8003c0c:	f3af 8000 	nop.w
 8003c10:	33145c07 	.word	0x33145c07
 8003c14:	3ca1a626 	.word	0x3ca1a626
 8003c18:	54442d18 	.word	0x54442d18
 8003c1c:	400921fb 	.word	0x400921fb
 8003c20:	54442d18 	.word	0x54442d18
 8003c24:	3ff921fb 	.word	0x3ff921fb
 8003c28:	54442d18 	.word	0x54442d18
 8003c2c:	3fe921fb 	.word	0x3fe921fb
 8003c30:	08003e20 	.word	0x08003e20
 8003c34:	08003e38 	.word	0x08003e38
 8003c38:	54442d18 	.word	0x54442d18
 8003c3c:	c00921fb 	.word	0xc00921fb
 8003c40:	54442d18 	.word	0x54442d18
 8003c44:	bff921fb 	.word	0xbff921fb
 8003c48:	7ff00000 	.word	0x7ff00000

08003c4c <__ieee754_sqrt>:
 8003c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c50:	ec55 4b10 	vmov	r4, r5, d0
 8003c54:	4e55      	ldr	r6, [pc, #340]	; (8003dac <__ieee754_sqrt+0x160>)
 8003c56:	43ae      	bics	r6, r5
 8003c58:	ee10 0a10 	vmov	r0, s0
 8003c5c:	ee10 3a10 	vmov	r3, s0
 8003c60:	462a      	mov	r2, r5
 8003c62:	4629      	mov	r1, r5
 8003c64:	d110      	bne.n	8003c88 <__ieee754_sqrt+0x3c>
 8003c66:	ee10 2a10 	vmov	r2, s0
 8003c6a:	462b      	mov	r3, r5
 8003c6c:	f7fc fc68 	bl	8000540 <__aeabi_dmul>
 8003c70:	4602      	mov	r2, r0
 8003c72:	460b      	mov	r3, r1
 8003c74:	4620      	mov	r0, r4
 8003c76:	4629      	mov	r1, r5
 8003c78:	f7fc faac 	bl	80001d4 <__adddf3>
 8003c7c:	4604      	mov	r4, r0
 8003c7e:	460d      	mov	r5, r1
 8003c80:	ec45 4b10 	vmov	d0, r4, r5
 8003c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c88:	2d00      	cmp	r5, #0
 8003c8a:	dc10      	bgt.n	8003cae <__ieee754_sqrt+0x62>
 8003c8c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8003c90:	4330      	orrs	r0, r6
 8003c92:	d0f5      	beq.n	8003c80 <__ieee754_sqrt+0x34>
 8003c94:	b15d      	cbz	r5, 8003cae <__ieee754_sqrt+0x62>
 8003c96:	ee10 2a10 	vmov	r2, s0
 8003c9a:	462b      	mov	r3, r5
 8003c9c:	ee10 0a10 	vmov	r0, s0
 8003ca0:	f7fc fa96 	bl	80001d0 <__aeabi_dsub>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	f7fc fd74 	bl	8000794 <__aeabi_ddiv>
 8003cac:	e7e6      	b.n	8003c7c <__ieee754_sqrt+0x30>
 8003cae:	1512      	asrs	r2, r2, #20
 8003cb0:	d074      	beq.n	8003d9c <__ieee754_sqrt+0x150>
 8003cb2:	07d4      	lsls	r4, r2, #31
 8003cb4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8003cb8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8003cbc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003cc0:	bf5e      	ittt	pl
 8003cc2:	0fda      	lsrpl	r2, r3, #31
 8003cc4:	005b      	lslpl	r3, r3, #1
 8003cc6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8003cca:	2400      	movs	r4, #0
 8003ccc:	0fda      	lsrs	r2, r3, #31
 8003cce:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8003cd2:	107f      	asrs	r7, r7, #1
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	2516      	movs	r5, #22
 8003cd8:	4620      	mov	r0, r4
 8003cda:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003cde:	1886      	adds	r6, r0, r2
 8003ce0:	428e      	cmp	r6, r1
 8003ce2:	bfde      	ittt	le
 8003ce4:	1b89      	suble	r1, r1, r6
 8003ce6:	18b0      	addle	r0, r6, r2
 8003ce8:	18a4      	addle	r4, r4, r2
 8003cea:	0049      	lsls	r1, r1, #1
 8003cec:	3d01      	subs	r5, #1
 8003cee:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8003cf2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8003cf6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003cfa:	d1f0      	bne.n	8003cde <__ieee754_sqrt+0x92>
 8003cfc:	462a      	mov	r2, r5
 8003cfe:	f04f 0e20 	mov.w	lr, #32
 8003d02:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8003d06:	4281      	cmp	r1, r0
 8003d08:	eb06 0c05 	add.w	ip, r6, r5
 8003d0c:	dc02      	bgt.n	8003d14 <__ieee754_sqrt+0xc8>
 8003d0e:	d113      	bne.n	8003d38 <__ieee754_sqrt+0xec>
 8003d10:	459c      	cmp	ip, r3
 8003d12:	d811      	bhi.n	8003d38 <__ieee754_sqrt+0xec>
 8003d14:	f1bc 0f00 	cmp.w	ip, #0
 8003d18:	eb0c 0506 	add.w	r5, ip, r6
 8003d1c:	da43      	bge.n	8003da6 <__ieee754_sqrt+0x15a>
 8003d1e:	2d00      	cmp	r5, #0
 8003d20:	db41      	blt.n	8003da6 <__ieee754_sqrt+0x15a>
 8003d22:	f100 0801 	add.w	r8, r0, #1
 8003d26:	1a09      	subs	r1, r1, r0
 8003d28:	459c      	cmp	ip, r3
 8003d2a:	bf88      	it	hi
 8003d2c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8003d30:	eba3 030c 	sub.w	r3, r3, ip
 8003d34:	4432      	add	r2, r6
 8003d36:	4640      	mov	r0, r8
 8003d38:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8003d3c:	f1be 0e01 	subs.w	lr, lr, #1
 8003d40:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8003d44:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003d48:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8003d4c:	d1db      	bne.n	8003d06 <__ieee754_sqrt+0xba>
 8003d4e:	430b      	orrs	r3, r1
 8003d50:	d006      	beq.n	8003d60 <__ieee754_sqrt+0x114>
 8003d52:	1c50      	adds	r0, r2, #1
 8003d54:	bf13      	iteet	ne
 8003d56:	3201      	addne	r2, #1
 8003d58:	3401      	addeq	r4, #1
 8003d5a:	4672      	moveq	r2, lr
 8003d5c:	f022 0201 	bicne.w	r2, r2, #1
 8003d60:	1063      	asrs	r3, r4, #1
 8003d62:	0852      	lsrs	r2, r2, #1
 8003d64:	07e1      	lsls	r1, r4, #31
 8003d66:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8003d6a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8003d6e:	bf48      	it	mi
 8003d70:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8003d74:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8003d78:	4614      	mov	r4, r2
 8003d7a:	e781      	b.n	8003c80 <__ieee754_sqrt+0x34>
 8003d7c:	0ad9      	lsrs	r1, r3, #11
 8003d7e:	3815      	subs	r0, #21
 8003d80:	055b      	lsls	r3, r3, #21
 8003d82:	2900      	cmp	r1, #0
 8003d84:	d0fa      	beq.n	8003d7c <__ieee754_sqrt+0x130>
 8003d86:	02cd      	lsls	r5, r1, #11
 8003d88:	d50a      	bpl.n	8003da0 <__ieee754_sqrt+0x154>
 8003d8a:	f1c2 0420 	rsb	r4, r2, #32
 8003d8e:	fa23 f404 	lsr.w	r4, r3, r4
 8003d92:	1e55      	subs	r5, r2, #1
 8003d94:	4093      	lsls	r3, r2
 8003d96:	4321      	orrs	r1, r4
 8003d98:	1b42      	subs	r2, r0, r5
 8003d9a:	e78a      	b.n	8003cb2 <__ieee754_sqrt+0x66>
 8003d9c:	4610      	mov	r0, r2
 8003d9e:	e7f0      	b.n	8003d82 <__ieee754_sqrt+0x136>
 8003da0:	0049      	lsls	r1, r1, #1
 8003da2:	3201      	adds	r2, #1
 8003da4:	e7ef      	b.n	8003d86 <__ieee754_sqrt+0x13a>
 8003da6:	4680      	mov	r8, r0
 8003da8:	e7bd      	b.n	8003d26 <__ieee754_sqrt+0xda>
 8003daa:	bf00      	nop
 8003dac:	7ff00000 	.word	0x7ff00000

08003db0 <_init>:
 8003db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003db2:	bf00      	nop
 8003db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003db6:	bc08      	pop	{r3}
 8003db8:	469e      	mov	lr, r3
 8003dba:	4770      	bx	lr

08003dbc <_fini>:
 8003dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dbe:	bf00      	nop
 8003dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dc2:	bc08      	pop	{r3}
 8003dc4:	469e      	mov	lr, r3
 8003dc6:	4770      	bx	lr
